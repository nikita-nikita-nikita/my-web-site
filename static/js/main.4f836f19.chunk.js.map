{"version":3,"sources":["images/me.jpg","serviceWorker.ts","pages/NotFound/index.tsx","components/InfoCard/index.tsx","containers/Technologies/index.tsx","components/ModalWindow/index.tsx","pages/HelloPage/index.tsx","pages/MainPage/index.tsx","components/LinkCard/index.tsx","components/Spinner/index.tsx","service/apiLinksService/index.ts","containers/Links/actions.ts","containers/Links/index.tsx","containers/Links/actionTypes.ts","pages/LinksPage/index.tsx","components/CharacterCard/index.tsx","components/BeautifulList/index.tsx","pages/AboutPage/index.tsx","pages/GamePage/index.tsx","components/SWComponents/SWSwitchPanel/index.tsx","components/SWComponents/SWRandomObject/index.tsx","components/SWComponents/SWRandomObjectsContainer/index.tsx","containers/SWContainer/actions.ts","containers/SWContainer/actionTypes.ts","components/SWComponents/SWHello/index.tsx","components/SWComponents/SWList/index.tsx","components/SWComponents/SWCharacter/index.tsx","components/SWComponents/SWCards/SWPlanetCard/index.tsx","components/SWComponents/SWCards/SWPersonCard/index.tsx","components/SWComponents/SWCards/SWStarshipCard/index.tsx","containers/SWContainer/index.tsx","pages/StarWarsPage/index.tsx","components/Header/index.tsx","components/Footer/index.tsx","components/RedirectToHome/index.tsx","containers/Routing/index.tsx","containers/Technologies/reducer.ts","service/swapiService/index.ts","helpers/randomNumber.ts","containers/SWContainer/sagas.ts","containers/SWContainer/reducer.ts","store.ts","containers/Links/reducer.ts","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","NotFound","className","InfoCard","link","title","src","alt","connect","rootState","links","technologies","useState","isToggled","toggleCards","test","navigator","userAgent","onMouseOver","onMouseOut","onClick","event","target","classList","contains","toggle","map","index","key","ModalWindow","children","show","setShow","onClose","includes","Icon","name","HelloMessageComponent","MainPage","LinkCard","avatar","linkToProfile","nickname","copied","setCopied","hovered","setHovered","input","useRef","href","rel","Input","fluid","value","ref","e","select","document","execCommand","focus","onBlur","aria-describedby","role","aria-hidden","style","opacity","id","Spinner","Dimmer","active","Loader","getInstagram","axios","get","then","data","graphql","user","profile_pic_url_hd","username","getGithub","avatar_url","login","getTelegram","a","getGmail","apiLinksService","actions","loadLinks","dispatch","console","log","type","payload","deleteLinks","bindActionCreators","isLoading","setLoading","useEffect","LinksPage","CharacterCard","imgLink","fullScreenCardClass","isRandomObject","isStarWars","isVertical","isInsideContainer","BeautifulList","me","AboutPage","img","width","GamesPage","SWSwitchPanel","to","RandomObject","isFullScreen","RandomObjectsContainer","randomObjects","person","planet","starship","isShown","setIsShown","height","gender","eyeColor","diameter","population","rotationPeriod","model","starshipClass","costInCredits","animation","as","loadList","template","putList","list","putPersons","putPlanet","putStarship","SWHello","SWList","deleteList","object","history","useHistory","push","item","toString","SWCharacter","loadFunction","SWPlanetCard","loadPlanet","SWPersonCard","loadPerson","SWStarshipCard","loadStarship","mapDispatchToProps","loadRandomObjects","loadPersonList","loadStarshipList","loadPlanetList","starWars","useInterval","exact","path","component","render","params","StarWarsPage","Header","showContextMenu","setShowContextMenu","toggleContextMenu","contextMenu","Footer","RedirectToHome","Routing","initialState","_apiBase","_imageBase","_validIds","planets","starships","persons","getResource","url","res","statusText","Error","status","getImagePerson","_extractId","getImagePlanet","getImageStarship","getAllObjects","response","results","_transformArrayResponse","getPerson","_transformPeople","getPlanet","_transformPlanet","getStarship","_transformStarship","getRandomObjects","rotation_period","eye_color","cost_in_credits","starship_class","elem","randomInteger","min","max","rand","Math","random","round","workerLoadRandomObjects","workerLoadPersonList","workerLoadPerson","workerLoadPlanet","workerLoadStarship","watchLoadData","call","SWApiService","validNumbers","put","action","takeEvery","createBrowserHistory","sagaMiddleware","createSagaMiddleware","middlewares","thunk","routerMiddleware","reducers","state","composedEnhancers","composeWithDevTools","applyMiddleware","rootReducer","combineReducers","router","connectRouter","store","createStore","run","App","root","getElementById","ReactDOM","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4f836f19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.3643d8ed.jpg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst NotFound: React.FC = () => (<h2 className=\"no-footer\">Not Found!</h2>);\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport \"./stylesInfoCard.scss\"\r\n\r\ntype Props = {\r\n    link: string,\r\n    title: string\r\n}\r\n\r\nconst InfoCard:React.FC<Props> = ({link, title}) => {\r\n    return (\r\n        <div className=\"info-card-container\">\r\n            <img src={link} className=\"img\" alt={title} />\r\n            <h2 className=\"title\">{title}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoCard;\r\n","import React, {useState, MouseEvent} from \"react\";\r\n// @ts-ignore\r\nimport {connect} from \"react-redux\";\r\nimport InfoCard from \"../../components/InfoCard\";\r\nimport \"./stylesTechnologies.scss\";\r\nimport {initialStateTechnologiesType} from \"./reducer\";\r\nimport {rootStateType} from \"../../store\";\r\ninterface actionOnPC {\r\n    onClick(event: MouseEvent<HTMLDivElement>|any):void\r\n}\r\ninterface actionOnMobile {\r\n    onMouseOver():void\r\n    onMouseOut():void\r\n}\r\nconst toggle = (toggleCards:Function):(actionOnMobile|actionOnPC)  => (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))\r\n    ?{\r\n        onMouseOver() {\r\n            toggleCards(true);\r\n        },\r\n        onMouseOut() {\r\n            toggleCards(false);\r\n        },\r\n    }\r\n    :{\r\n        onClick(event) {\r\n            if(event.target.classList.contains('info-cards')||event.target.classList.contains('technologies-title'))\r\n            toggleCards((isToggled:boolean)=>!isToggled)\r\n        }\r\n    }\r\ntype Props = {\r\n    links: initialStateTechnologiesType\r\n}\r\nconst Technologies: React.FC<Props> = ({links}) => {\r\n    const [isToggled, toggleCards] = useState(false);\r\n    return (\r\n        <div className=\"technologies-section\">\r\n            <div>\r\n                <div className={`info-cards${isToggled?\" toggled\":\"\"}`} {...toggle(toggleCards)}>\r\n                    <h1 className=\"technologies-title\">Technologies</h1>\r\n                    {links.map(({link, title}, index) =>\r\n                        (<InfoCard\r\n                            key={index}\r\n                            link={link}\r\n                            title={title}/>)\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (rootState: rootStateType) => ({\r\n    links: rootState.technologies\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(Technologies);\r\n","import React, {useState} from 'react';\r\nimport './stylesModalWindow.scss';\r\nimport {Icon} from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    title: string,\r\n    children: string\r\n}\r\n\r\nconst ModalWindow: React.FC<Props> = ({title, children}) => {\r\n    const [show, setShow] = useState(true)\r\n    const onClose = ({ target }: any) => {\r\n        const { className } = target;\r\n        if(className==='popup-body'||className.includes('popup-close-btn')||className.includes('close icon')) setShow(false);\r\n    }\r\n\r\n    return (\r\n        <div className={(show) ? 'popup open' : 'popup close'}>\r\n            <div className=\"popup-body\" onClick={onClose}>\r\n                <div className=\"popup-content\">\r\n                    <h2 className=\"popup-title\">{title}</h2>\r\n                    {children}\r\n                    <div className=\"popup-close\">\r\n                        <button className=\"popup-close-btn\" onClick={onClose}>\r\n                            <Icon name=\"close\"/>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModalWindow;\r\n","import React from \"react\";\r\nimport ModalWindow from \"../../components/ModalWindow\";\r\n\r\nconst body: string =\r\n`I glad to see you here, wanderer.\r\nDon't know why you here, but it's good especially for me.\r\nThis site was made by using react and typescript`\r\n\r\n\r\nconst HelloMessageComponent = () => <ModalWindow title=\"Welcome to my website\">\r\n    {body}\r\n</ModalWindow>\r\n\r\nexport default HelloMessageComponent;\r\n","import React from \"react\";\r\nimport Technologies from \"../../containers/Technologies\";\r\nimport HelloMessageComponent from \"../HelloPage\";\r\n\r\nconst MainPage: React.FC = () => (\r\n    <div className=\"no-footer\">\r\n        <Technologies />\r\n        <HelloMessageComponent />\r\n    </div>\r\n\r\n);\r\n\r\nexport default MainPage;\r\n","import React, {useRef, useState} from \"react\";\r\nimport \"./stylesLinkCard.scss\";\r\nimport {Icon, Input, StrictIconProps} from \"semantic-ui-react\";\r\n\r\ninterface Props extends StrictIconProps{\r\n    avatar?: string\r\n    linkToProfile: string\r\n    nickname: string\r\n    name:StrictIconProps|any\r\n    linkToCopy?:string\r\n}\r\nconst LinkCard: React.FC<Props> = ({avatar, linkToProfile, name, nickname}) => {\r\n    const [copied, setCopied] = useState(false);\r\n    const [hovered, setHovered] = useState(false);\r\n    let input: any = useRef();\r\n    const copyToClipboard = (e: any) => {\r\n        input.select();\r\n        document.execCommand('copy');\r\n        e.target.focus();\r\n        setCopied(true);\r\n    };\r\n    const shouldShowElement = ({target}:any) => {\r\n        const isNotTooltip:boolean = !(\r\n            target.classList.contains(\"arrow\")||\r\n            target.classList.contains(\"tooltip\")||\r\n            target.classList.contains(\"tooltip-text\")\r\n        );\r\n        if(isNotTooltip) setHovered(true);\r\n    }\r\n    return (\r\n        <div className=\"link-card\">\r\n            <div className=\"account-info\">\r\n                <a href={linkToProfile} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    {\r\n                        avatar\r\n                            ?(\r\n                                <>\r\n                                    <img className=\"avatar-link\" src={avatar} alt=\"Avatar\"/>\r\n                                </>\r\n                            )\r\n                            : <img className=\"avatar-link\" src=\"https://forwardsummit.ca/wp-content/uploads/2019/01/avatar-default.png\" alt=\"Avatar\"/>\r\n                    }\r\n                    <p className=\"nickname\">{nickname}</p>\r\n                </a>\r\n            </div>\r\n            <div className=\"content-below\">\r\n                <p className=\"icon-link\">\r\n                    <Icon name={name}/>\r\n                </p>\r\n                <div className=\"input-container\">\r\n                    <Input\r\n                        fluid\r\n                        value={nickname}\r\n                        ref={ref => {\r\n                            input = ref;\r\n                        }}\r\n                    />\r\n                </div>\r\n                <button\r\n                    className=\"copy-link-button\"\r\n                    onClick={copyToClipboard}\r\n                    onMouseOver={shouldShowElement}\r\n                    onMouseOut={()=> setHovered(false)}\r\n                    onBlur={()=> setCopied(false)}\r\n                    aria-describedby={`tooltip-${name}`}\r\n                    >\r\n                    Copy <Icon name=\"copy\"/>\r\n                    <div\r\n                        className=\"tooltip\"\r\n                        role=\"tooltip\"\r\n                        aria-hidden={!hovered}\r\n                        style={{opacity:(hovered?1:0)}}\r\n                        id={`tooltip-${name}`}>\r\n                        <div className=\"tooltip-text\">{copied?'Copied':'Copy to clipboard'}</div>\r\n                        <div className=\"arrow\"/>\r\n                    </div>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default LinkCard;\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nconst Spinner:React.FC = () => (\r\n    <Dimmer active>\r\n        <Loader />\r\n    </Dimmer>\r\n);\r\n\r\nexport default Spinner;\r\n","import axios from 'axios';\r\n\r\nclass apiLinksService {\r\n    getInstagram = () => {\r\n        return axios.get(\"https://www.instagram.com/nikita_good_guy/?__a=1\")\r\n            .then(({data:{graphql:{user:{profile_pic_url_hd:avatar, username: nickname}} }})=>\r\n                ({avatar, nickname, name:'instagram', linkToProfile:`https://www.instagram.com/${nickname}/`}))\r\n    }\r\n\r\n    getGithub = () => {\r\n       return axios.get(\"https://api.github.com/users/nikita-nikita-nikita\")\r\n           .then(({data:{avatar_url:avatar, login:nickname}})=>\r\n               ({avatar, nickname, name:'github', linkToProfile:`https://github.com/${nickname}`}))\r\n    }\r\n\r\n    // telegram don't have api to take info about profile ¯\\_(ツ)_/¯\r\n    getTelegram = async () => ({nickname:\"@STALINNASHPRESIDENT\" /*rofl*/ , name:'telegram', linkToProfile:\"tg://tele.gg/STALINNASHPRESIDENT\"});\r\n\r\n    getGmail = async () => ({nickname:\"neymarenko123@gmail.com\", name:'mail', linkToProfile:\"mailto:neymarenko123@gmail.com?Body\"});\r\n}\r\n\r\nexport default new apiLinksService();\r\n","import {\r\n    DELETE_POSTS,\r\n    LOAD_POSTS\r\n} from './actionTypes';\r\n\r\nimport apiLinksService from \"../../service/apiLinksService\";\r\n\r\nexport const loadLinks = () => async (dispatch:any) =>{\r\n    console.log(\"load\");\r\n    dispatch({type:LOAD_POSTS, payload:[(await apiLinksService.getGithub()),(await apiLinksService.getInstagram()),(await apiLinksService.getGmail()),(await apiLinksService.getTelegram())]})\r\n    return {}\r\n}\r\napiLinksService.getGithub();\r\n\r\nexport const deleteLinks = () => (dispatch:any) =>{\r\n    dispatch({type:DELETE_POSTS})\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport LinkCard from \"../../components/LinkCard\";\r\nimport Spinner from \"../../components/Spinner\";\r\nimport \"./stylesLinks.scss\";\r\nimport { bindActionCreators } from 'redux';\r\n// @ts-ignore\r\nimport {connect} from \"react-redux\";\r\nimport {loadLinks, deleteLinks} from \"./actions\";\r\nimport {initialStateLinksType} from \"./reducer\";\r\nimport {rootStateType} from \"../../store\";\r\n\r\ninterface Props {\r\n    links:initialStateLinksType,\r\n    loadLinks():Promise<{}>\r\n    deleteLinks():void\r\n}\r\n\r\nconst Links:React.FC<Props> = ({links, loadLinks, deleteLinks}) => {\r\n    const [isLoading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        loadLinks().then(()=>setLoading(false));\r\n        return () => deleteLinks();\r\n    }, [loadLinks, deleteLinks]);\r\n    if(isLoading) return <Spinner/>;\r\n    return (\r\n        <div className=\"links\">\r\n            {links.map(data=>\r\n                <LinkCard {...data}/>)}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (rootState:rootStateType)=>({\r\n    links:rootState.links\r\n});\r\n\r\nconst actions:any = {\r\n    loadLinks,\r\n    deleteLinks\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch:any) => bindActionCreators(actions, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Links);\r\n","export const LOAD_POSTS = \"LOAD_POSTS\";\r\nexport const DELETE_POSTS = \"DELETE_POSTS\";\r\n","import React from \"react\";\r\nimport \"./stylesLinks.scss\";\r\nimport Links from \"../../containers/Links\";\r\nconst LinksPage = () => (\r\n    <main className=\"no-footer\">\r\n        <Links/>\r\n    </main>\r\n);\r\n\r\nexport default LinksPage;\r\n","import React from \"react\";\r\nimport \"./stylesCharacterCard.scss\";\r\n\r\ninterface Props {\r\n    imgLink:string\r\n    children?: any\r\n    fullScreenCardClass?:boolean\r\n    isRandomObject?:boolean\r\n    isVertical?:boolean\r\n    isInsideContainer?:boolean\r\n    isStarWars?:boolean\r\n}\r\n\r\n// to highlight name add class \"name\"\r\n\r\nconst CharacterCard: React.FC<Props> = ({imgLink, children, fullScreenCardClass, isRandomObject, isStarWars, isVertical, isInsideContainer})=> {\r\n    return(\r\n        <div className=\r\n                 {`character-card`+`${fullScreenCardClass ? ' full-screen-character-card' : ''}${isRandomObject ? ' random-object' : ''}${isVertical ? ' vertical' : ''}${isInsideContainer?' inside-container': ''}${isStarWars? ' sw-card-color': ''}`}>\r\n            <img src={imgLink} className=\"character-img\" alt=\"avatar\"/>\r\n            <ul className=\"stats\">\r\n                {children}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterCard;\r\n","import React from \"react\";\r\nimport \"./stylesBeautifulList.scss\"\r\n\r\ntype Props = {\r\n    title:string\r\n    children:any\r\n    style?: React.CSSProperties\r\n}\r\n\r\nconst BeautifulList:React.FC<Props> = ({title, children, style}) => (\r\n    <label className=\"beautiful-label\" style={style}>\r\n        <input type=\"checkbox\" className=\"about-checkbox\"/>\r\n        <div className=\"checkbox-content\">\r\n            <strong className=\"about-paragraph\">{title}</strong><div className=\"triangle\"/>\r\n            <ul>\r\n                {children}\r\n            </ul>\r\n        </div>\r\n    </label>\r\n);\r\n\r\nexport default BeautifulList;\r\n","import React from \"react\";\r\nimport \"./stylesAbout.scss\";\r\nimport CharacterCard from \"../../components/CharacterCard\";\r\nimport img from \"../../images/me.jpg\";\r\nimport BeautifulList from \"../../components/BeautifulList\";\r\nconst me:any = {\r\n    name: 'Nikita',\r\n    age: 17,\r\n    gender: 'male',\r\n    eyeColor: 'blue'\r\n}\r\n\r\nconst AboutPage = () => (\r\n    <main className=\"about-page no-footer\">\r\n        <h1 className=\"content-before-footer\">About me</h1>\r\n        <CharacterCard imgLink={img} fullScreenCardClass isInsideContainer>\r\n            <li className=\"name\">{me.name}</li>\r\n            <li>Age: {me.age}</li>\r\n            <li>Gender: {me.gender}</li>\r\n            <li>Eye color: {me.eyeColor}</li>\r\n        </CharacterCard>\r\n        <div className=\"about-content\">\r\n            <h2>A little bit more about me</h2>\r\n            <div className=\"about-text\">\r\n                <BeautifulList title=\"Education\" style={{width:'33%'}}>\r\n                    <li>2005-2008 Kindergarten</li>\r\n                    <li>2008-2015 School № 96</li>\r\n                    <li>2015-2019 Lyceum № 142</li>\r\n                    <li>2015-Nowadays Igor Sikorsky Kiev Polytechnic Institute</li>\r\n                </BeautifulList>\r\n                <BeautifulList title=\"Hobby\" style={{width:'33%'}}>\r\n                    <li>Programming</li>\r\n                    <li>Football</li>\r\n                    <li>Volleyball</li>\r\n                    <li>Math</li>\r\n                </BeautifulList>\r\n                <BeautifulList title=\"Character\" style={{width:'33%'}}>\r\n                    <li>Purposeful</li>\r\n                    <li>Team player</li>\r\n                    <li>I like to improve myself and cats</li>\r\n                </BeautifulList>\r\n            </div>\r\n        </div>\r\n    </main>\r\n\r\n);\r\n\r\nexport default AboutPage;\r\n","import React from \"react\";\r\nimport \"./stylesGames.scss\";\r\n\r\nconst GamesPage = () => (<h2 className=\"no-footer\">Games page</h2>);\r\n\r\nexport default GamesPage;\r\n","import React from \"react\";\r\n// @ts-ignore\r\nimport {Link} from \"react-router-dom\";\r\nimport \"./stylesSWSwitchPanel.scss\";\r\n\r\nconst SWSwitchPanel: React.FC = () => (\r\n    <nav className=\"sw-control-panel\">\r\n        <div className=\"sw-link sw-characters-link\">\r\n            <Link to=\"/my-web-site/sw/persons/\">\r\n                <p className=\"sw-link-text\">Characters</p>\r\n            </Link>\r\n        </div>\r\n        <div className=\"sw-link sw-planets-link\">\r\n            <Link to=\"/my-web-site/sw/planets/\">\r\n                <p className=\"sw-link-text\">Planets</p>\r\n            </Link>\r\n        </div>\r\n        <div className=\"sw-link sw-starships-link\">\r\n            <Link to=\"/my-web-site/sw/starships/\">\r\n                <p className=\"sw-link-text\">Starships</p>\r\n            </Link>\r\n        </div>\r\n    </nav>\r\n);\r\n\r\nexport default SWSwitchPanel;\r\n","import React from \"react\";\r\nimport \"./stylesSWRandomObject.scss\";\r\nimport CharacterCard from \"../../CharacterCard\";\r\n\r\ntype props = {\r\n    img:string\r\n    children?: any|undefined\r\n    isFullScreen?:boolean\r\n}\r\n\r\nconst RandomObject:React.FC<props> = ({img, children, isFullScreen}) => {\r\n    return <CharacterCard imgLink={img} isRandomObject={!isFullScreen} isStarWars fullScreenCardClass={isFullScreen}>{children}</CharacterCard>\r\n}\r\n\r\n\r\nexport default RandomObject;\r\n","import React, {useState} from \"react\";\r\nimport \"./stylesSWRandomObjectsContainer.scss\";\r\nimport RandomObject from \"../SWRandomObject\";\r\nimport {allObjectsType} from \"../../../containers/SWContainer/reducer\";\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\ntype Props = {\r\n    randomObjects: allObjectsType\r\n}\r\n\r\nconst RandomObjectsContainer: React.FC<Props> = ({randomObjects: {person, planet, starship} = {}}) => {\r\n        const [isShown, setIsShown] = useState(false);\r\n        return (\r\n            <div className=\"sw-full-screen-width\">\r\n                {person && planet && starship\r\n                    ? (\r\n                        <>\r\n                            <div className=\"sw-random-objects-big-container min-width-1000\">\r\n                                <RandomObject img={person.img}>\r\n                                    <li className=\"name\">{person.name}</li>\r\n                                    <li>Height: {person.height}</li>\r\n                                    <li>Gender: {person.gender}</li>\r\n                                    <li>Eye color: {person.eyeColor}</li>\r\n                                </RandomObject>\r\n                                <RandomObject img={planet.img}>\r\n                                    <li className=\"name\">{planet.name}</li>\r\n                                    <li>Diameter: {planet.diameter}</li>\r\n                                    <li>Population: {planet.population}</li>\r\n                                    <li>Rotation period: {planet.rotationPeriod}</li>\r\n                                </RandomObject>\r\n                                <RandomObject img={starship.img}>\r\n                                    <li className=\"name\">{starship.name}</li>\r\n                                    <li>Model: {starship.model}</li>\r\n                                    <li>Starship class: {starship.starshipClass}</li>\r\n                                    <li>Cost in credits: {starship.costInCredits}</li>\r\n                                </RandomObject>\r\n                            </div>\r\n                            <div onClick={() => setIsShown(!isShown)} className=\"sw-random-objects-small-container max-width-1000\">\r\n                                <button>{!isShown ? \"Show random characters\" : \"Hide random characters\"}</button>\r\n                                {isShown ? <div className=\"sw-random-objects-small\">\r\n                                    <RandomObject img={person.img} isFullScreen>\r\n                                        <li className=\"name\">{person.name}</li>\r\n                                        <li>Height: {person.height}</li>\r\n                                        <li>Gender: {person.gender}</li>\r\n                                        <li>Eye color: {person.eyeColor}</li>\r\n                                    </RandomObject>\r\n                                    <RandomObject img={planet.img} isFullScreen>\r\n                                        <li className=\"name\">{planet.name}</li>\r\n                                        <li>Diameter: {planet.diameter}</li>\r\n                                        <li>Population: {planet.population}</li>\r\n                                        <li>Rotation period: {planet.rotationPeriod}</li>\r\n                                    </RandomObject>\r\n                                    <RandomObject img={starship.img} isFullScreen>\r\n                                        <li className=\"name\">{starship.name}</li>\r\n                                        <li>Model: {starship.model}</li>\r\n                                        <li>Starship class: {starship.starshipClass}</li>\r\n                                        <li>Cost in credits: {starship.costInCredits}</li>\r\n                                    </RandomObject>\r\n                                </div>\r\n                                : null}\r\n                            </div>\r\n                        </>)\r\n                    : <Spinner animation=\"grow\" as=\"div\"/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n;\r\n\r\nexport default RandomObjectsContainer;\r\n","import {\r\n    LOAD_RANDOM_OBJECTS,\r\n    PUT_RANDOM_OBJECTS,\r\n    LOAD_SW_LIST,\r\n    PUT_SW_LIST,\r\n    LOAD_SW_STARSHIP,\r\n    LOAD_SW_PERSON,\r\n    LOAD_SW_PLANET,\r\n    PUT_SW_CHARACTER\r\n} from \"./actionTypes\";\r\n\r\nimport {allObjectsType, swList, person, planet, starship} from \"./reducer\";\r\n\r\nexport const loadList = (template:string) => () => ({\r\n    type: LOAD_SW_LIST,\r\n    payload: template\r\n});\r\nexport const putList = (list:swList) => ({\r\n    type: PUT_SW_LIST,\r\n    payload: list\r\n});\r\n\r\nexport const deleteList = () => ({\r\n    type: PUT_SW_LIST,\r\n    payload: null\r\n});\r\n\r\nexport const loadRandomObjects = () => ({\r\n    type: LOAD_RANDOM_OBJECTS\r\n});\r\nexport const putRandomObjects = (objects:allObjectsType) => ({\r\n    type: PUT_RANDOM_OBJECTS,\r\n    payload: objects\r\n});\r\n\r\nexport const loadPerson = (id: number) => ({\r\n    type: LOAD_SW_PERSON,\r\n    payload: id\r\n});\r\nexport const putPersons = (person: person) => ({\r\n    type: PUT_SW_CHARACTER,\r\n    payload: {person}\r\n});\r\n\r\nexport const loadPlanet = (id: number) => ({\r\n    type: LOAD_SW_PLANET,\r\n    payload: id\r\n});\r\nexport const putPlanet = (planet: planet) => ({\r\n    type: PUT_SW_CHARACTER,\r\n    payload: {planet}\r\n});\r\n\r\nexport const loadStarship = (id: number) => ({\r\n    type: LOAD_SW_STARSHIP,\r\n    payload: id\r\n});\r\nexport const putStarship = (starship: starship) => ({\r\n    type: PUT_SW_CHARACTER,\r\n    payload: {starship}\r\n});\r\n","export const LOAD_SW_LIST:string = \"LOAD_PERSON_LIST\";\r\nexport const PUT_SW_LIST:string = \"PUT_SW_LIST\";\r\nexport const LOAD_SW_PLANET:string = \"LOAD_SW_PLANET\";\r\nexport const LOAD_SW_PERSON:string = \"LOAD_SW_PERSON\";\r\nexport const LOAD_SW_STARSHIP:string = \"LOAD_SW_STARSHIP\";\r\nexport const PUT_SW_CHARACTER:string = \"PUT_SW_CHARACTER\";\r\nexport const LOAD_RANDOM_OBJECTS:string = \"LOAD_RANDOM_OBJECTS\";\r\nexport const PUT_RANDOM_OBJECTS:string = \"PUT_RANDOM_OBJECTS\";\r\n","import React from \"react\";\r\nimport \"./stylesSWHello.scss\";\r\n\r\nconst SWHello:React.FC = () => {\r\n    return (\r\n        <div className=\"sw-hello-h1-container\">\r\n            <h1 className=\"sw-hello-h1\">Welcome to star wars word, jedi, choose the category</h1>\r\n            <p>Arrow will help you</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SWHello\r\n","import React, {useEffect} from \"react\";\r\n// @ts-ignore\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport \"./stylesSWList.scss\";\r\nimport {swList, planet, starship, person} from \"../../../containers/SWContainer/reducer\";\r\nimport Spinner from \"react-bootstrap/cjs/Spinner\";\r\ntype Props = {\r\n    list?: swList\r\n    deleteList: Function\r\n    loadList: Function\r\n    object: planet|starship|person|undefined\r\n}\r\n\r\nconst SWList:React.FC<Props> = ({list, deleteList, loadList, object}) => {\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        loadList();\r\n        if(object) history.push(object.id);\r\n        return ()=>{deleteList()}\r\n    }, [deleteList, loadList, history, object]);\r\n    return(\r\n        list ?\r\n            <ul className=\"sw-list\">\r\n                {list.map(item=>(\r\n                    <Link to={item.id}>\r\n                        <li key={item.id.toString()}>\r\n                            {item.name}\r\n                        </li>\r\n                    </Link>\r\n                    )\r\n                )}\r\n            </ul>\r\n            :(<div className=\"sw-list\"><Spinner animation=\"grow\"/></div>)\r\n    )\r\n}\r\n\r\nexport default SWList;\r\n","import React, {useEffect} from \"react\";\r\nimport \"./stylesSWCharacter.scss\";\r\n\r\nimport CharacterCard from \"../../CharacterCard\";\r\nimport {person, planet, starship} from \"../../../containers/SWContainer/reducer\";\r\nimport Spinner from \"react-bootstrap/cjs/Spinner\";\r\n\r\ntype Props = {\r\n    children: any\r\n    object: planet | starship | person | undefined\r\n    id: string\r\n    loadFunction: Function\r\n}\r\n\r\nconst SWCharacter: React.FC<Props> = ({children, object, id, loadFunction}) => {\r\n    useEffect(() => {\r\n        loadFunction(id);\r\n    }, [loadFunction, id]);\r\n    return object ?\r\n        (\r\n            <div className=\"sw-container-character\">\r\n                <CharacterCard imgLink={object.img} isVertical fullScreenCardClass isInsideContainer isStarWars>\r\n                    {children}\r\n                </CharacterCard>\r\n            </div>\r\n        )\r\n        : (<div className=\"sw-container-character\"><Spinner animation=\"grow\"/></div>);\r\n}\r\n\r\nexport default SWCharacter;\r\n","import React from \"react\";\r\nimport SWCharacter from \"../../SWCharacter\";\r\nimport {planet} from \"../../../../containers/SWContainer/reducer\";\r\ntype Props = {\r\n    planet?: planet|undefined\r\n    loadPlanet: Function\r\n    id: string\r\n}\r\nconst SWPlanetCard: React.FC<Props> = ({planet, loadPlanet, id}) => (\r\n    <SWCharacter loadFunction={loadPlanet} id={id} object={planet}>\r\n        <li className=\"name\">{planet?.name}</li>\r\n        <li>Diameter: {planet?.diameter}</li>\r\n        <li>Population: {planet?.population}</li>\r\n        <li>Rotation period: {planet?.rotationPeriod}</li>\r\n    </SWCharacter>\r\n);\r\n\r\nexport default SWPlanetCard;\r\n","import React from \"react\";\r\nimport SWCharacter from \"../../SWCharacter\";\r\nimport {person} from \"../../../../containers/SWContainer/reducer\";\r\n\r\ntype Props = {\r\n    person?: person | undefined\r\n    loadPerson: Function\r\n    id: string\r\n}\r\n\r\nconst SWPersonCard: React.FC<Props> = ({person, loadPerson, id}) => (\r\n    <SWCharacter loadFunction={loadPerson} id={id} object={person}>\r\n        <li className=\"name\">{person?.name}</li>\r\n        <li>Height: {person?.height}</li>\r\n        <li>Gender: {person?.gender}</li>\r\n        <li>Eye color: {person?.eyeColor}</li>\r\n    </SWCharacter>\r\n);\r\n\r\nexport default SWPersonCard;\r\n","import React from \"react\";\r\nimport SWCharacter from \"../../SWCharacter\";\r\nimport {starship} from \"../../../../containers/SWContainer/reducer\";\r\n\r\ntype Props = {\r\n    starship?: starship|undefined\r\n    loadStarship: Function\r\n    id: string\r\n}\r\nconst SWStarshipCard: React.FC<Props> = ({starship, id, loadStarship}) => (\r\n    <SWCharacter loadFunction={loadStarship} id={id} object={starship}>\r\n        <li className=\"name\">{starship?.name}</li>\r\n        <li>Model: {starship?.model}</li>\r\n        <li>Starship class: {starship?.starshipClass}</li>\r\n        <li>Cost in credits: {starship?.costInCredits}</li>\r\n    </SWCharacter>\r\n);\r\n\r\nexport default SWStarshipCard;\r\n","import React, {useEffect} from \"react\";\r\nimport \"./stylesSWContainer.scss\";\r\n//@ts-ignore\r\nimport {connect} from \"react-redux\";\r\n//@ts-ignore\r\nimport { Route, RouteComponentProps } from 'react-router-dom';\r\n//@ts-ignore\r\nimport useInterval from 'react-useinterval';\r\n// @ts-ignore\r\nimport SWSwitchPanel from \"../../components/SWComponents/SWSwitchPanel\";\r\nimport RandomObjectsContainer from \"../../components/SWComponents/SWRandomObjectsContainer\";\r\nimport {rootStateType} from \"../../store\";\r\nimport {loadRandomObjects, loadList, deleteList, loadPerson, loadPlanet, loadStarship} from \"./actions\";\r\nimport {allObjectsType, swList, planet, starship, person} from \"./reducer\";\r\nimport SWHello from \"../../components/SWComponents/SWHello\";\r\nimport SWList from \"../../components/SWComponents/SWList\";\r\nimport SWPlanetCard from \"../../components/SWComponents/SWCards/SWPlanetCard\";\r\nimport SWPersonCard from \"../../components/SWComponents/SWCards/SWPersonCard\";\r\nimport SWStarshipCard from \"../../components/SWComponents/SWCards/SWStarshipCard\";\r\n\r\ntype Props = {\r\n    loadRandomObjects: Function\r\n    loadPersonList: Function\r\n    loadStarshipList: Function\r\n    loadPlanetList: Function\r\n    randomObjects: allObjectsType\r\n    list: swList\r\n    router: any\r\n    deleteList: Function\r\n    planet:planet|undefined\r\n    starship:starship|undefined\r\n    person:person|undefined\r\n    loadPerson: Function\r\n    loadPlanet: Function\r\n    loadStarship: Function\r\n}\r\n\r\ntype TParams = {\r\n    id: string\r\n}\r\n\r\nconst SWContainer:React.FC<Props> = (\r\n    {\r\n        loadRandomObjects,\r\n        randomObjects,\r\n        loadStarshipList,\r\n        loadPlanetList,\r\n        loadPersonList,\r\n        list,\r\n        deleteList,\r\n        loadPlanet,\r\n        loadStarship,\r\n        loadPerson,\r\n        planet,\r\n        person,\r\n        starship}) => {\r\n    useEffect(()=>{\r\n        loadRandomObjects()\r\n    }, [loadRandomObjects]);\r\n    useInterval(()=>loadRandomObjects(), 5000);\r\n\r\n    return (\r\n        <main className=\"no-footer full-screen sw-color sw-main-page\">\r\n            <RandomObjectsContainer randomObjects={randomObjects}/>\r\n            <SWSwitchPanel/>\r\n            <Route exact path=\"/my-web-site/sw\" component={SWHello}/>\r\n            <Route path=\"/my-web-site/sw/persons\" render={()=> <SWList object={person} list={list} deleteList={deleteList} loadList={loadPersonList}/>}/>\r\n            <Route path=\"/my-web-site/sw/planets\" render={()=> <SWList object={planet} list={list} deleteList={deleteList} loadList={loadPlanetList}/>}/>\r\n            <Route path=\"/my-web-site/sw/starships\" render={()=> <SWList object={starship} list={list} deleteList={deleteList} loadList={loadStarshipList}/>}/>\r\n            <Route path=\"/my-web-site/sw/persons/:id\" render={({match:{params:{id}}}:RouteComponentProps<TParams>)=>\r\n                <SWPersonCard person={person} id={id} loadPerson={loadPerson}/>\r\n            }/>\r\n            <Route path=\"/my-web-site/sw/planets/:id\" render={({match:{params:{id}}}:RouteComponentProps<TParams>)=>\r\n                <SWPlanetCard planet={planet} id={id} loadPlanet={loadPlanet}/>\r\n            }/>\r\n            <Route path=\"/my-web-site/sw/starships/:id\" render={({match:{params:{id}}}:RouteComponentProps<TParams>)=>\r\n                <SWStarshipCard starship={starship} id={id} loadStarship={loadStarship}/>\r\n            }/>\r\n        </main>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({starWars: {randomObjects, list, object}}:rootStateType) => (\r\n    {\r\n        randomObjects,\r\n        list,\r\n        planet: object?.planet,\r\n        starship: object?.starship,\r\n        person: object?.person\r\n\r\n    }\r\n);\r\n\r\nconst mapDispatchToProps =\r\n    {\r\n        loadRandomObjects,\r\n        loadPersonList: loadList(\"people\"),\r\n        loadStarshipList: loadList(\"starships\"),\r\n        loadPlanetList: loadList(\"planets\"),\r\n        deleteList,\r\n        loadPerson,\r\n        loadPlanet,\r\n        loadStarship\r\n    }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SWContainer);\r\n","import React from \"react\";\r\nimport SWContainer from \"../../containers/SWContainer\";\r\n\r\nconst StarWarsPage = () => (\r\n    <SWContainer />\r\n);\r\n\r\nexport default StarWarsPage;\r\n","import React, {useState} from \"react\";\r\n// @ts-ignore\r\nimport { NavLink } from 'react-router-dom';\r\nimport {Icon} from \"semantic-ui-react\";\r\nimport \"./styleHeader.scss\";\r\n\r\nconst Header: React.FC = () => {\r\n    const [showContextMenu, setShowContextMenu] = useState(false);\r\n    const toggleContextMenu = () => setShowContextMenu(contextMenu => {\r\n            return !contextMenu;\r\n        }\r\n    );\r\n    return (\r\n        <header className=\"header no-footer\">\r\n            <nav className=\"nav-header\">\r\n                <div className=\"burger-menu header-just-on-small-display\">\r\n                    <div className=\"burger-menu\">\r\n                        <button\r\n                            className=\"burger-menu-btn header-text\"\r\n                            onClick={toggleContextMenu}>\r\n                                <Icon name=\"bars\"/>\r\n                        </button>\r\n                        {\r\n                            showContextMenu ?\r\n                                (\r\n                                    <ul>\r\n                                        <li className=\"header-text\" onClick={toggleContextMenu}><NavLink className=\"header-text\" to=\"/my-web-site/\"><Icon name=\"home\"/></NavLink></li>\r\n                                        <li className=\"header-text\" onClick={toggleContextMenu}><NavLink className=\"header-text\" to=\"/my-web-site/games\">Games</NavLink></li>\r\n                                        <li className=\"header-text\" onClick={toggleContextMenu}><NavLink className=\"header-text\" to=\"/my-web-site/links\">Links</NavLink></li>\r\n                                        <li className=\"header-text\" onClick={toggleContextMenu}><NavLink className=\"header-text\" to=\"/my-web-site/about\">About</NavLink></li>\r\n                                        <li className=\"header-text\" onClick={toggleContextMenu}><NavLink className=\"header-text\" to=\"/my-web-site/sw\">Star Wars</NavLink></li>\r\n                                    </ul>\r\n                                )\r\n                                : null\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"logo-container header-just-on-big-display\">\r\n                    <h2 className=\"logo header-text\">\r\n                        <NavLink className=\"header-text\" to=\"/my-web-site/\"><Icon name=\"home\"/></NavLink>\r\n                    </h2>\r\n                </div>\r\n                <div className=\"header-just-on-big-display\">\r\n                    <ul className=\"header-nav-list\">\r\n                        <li className=\"header-text\"><NavLink className=\"header-text\" to=\"/my-web-site/games\">Games</NavLink></li>\r\n                        <li className=\"header-text\"><NavLink className=\"header-text\" to=\"/my-web-site/links\">Links</NavLink></li>\r\n                        <li className=\"header-text\"><NavLink className=\"header-text\" to=\"/my-web-site/about\">About</NavLink></li>\r\n                        <li className=\"header-text\"><NavLink className=\"header-text\" to=\"/my-web-site/sw\">Star Wars</NavLink></li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport \"./stylesFooter.scss\"\r\n\r\nconst Footer:React.FC = () => {\r\n    return(\r\n        <footer className=\"footer\">\r\n            <nav className=\"nav-footer\">\r\n                <div className=\"link\">\r\n                    <a href=\"https://github.com/nikita-nikita-nikita\" ><Icon name=\"github\" />GitHub</a>\r\n                </div>\r\n                <div className=\"link\">\r\n                    <a href=\"https://ru.reactjs.org/\"><Icon name=\"react\" />React</a>\r\n                </div>\r\n                <div className=\"link\">\r\n                    <a href=\"https://nodejs.org/uk/\"><Icon name=\"node js\" />Node js</a>\r\n                </div>\r\n            </nav>\r\n            <div className=\"footer-text\">\r\n                Some useful text in footer\r\n            </div>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n// @ts-ignore\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst RedirectToHome:React.FC = () => <Redirect to=\"/my-web-site\"/>;\r\n\r\nexport default RedirectToHome;\r\n","import React from \"react\";\r\n// @ts-ignore\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport NotFound from \"../../pages/NotFound\";\r\nimport MainPage from \"../../pages/MainPage\";\r\nimport LinksPage from \"../../pages/LinksPage\";\r\nimport AboutPage from \"../../pages/AboutPage\";\r\nimport GamesPage from \"../../pages/GamePage\";\r\nimport StarWarsPage from \"../../pages/StarWarsPage\";\r\nimport Header from \"../../components/Header\";\r\nimport Footer from \"../../components/Footer\";\r\nimport RedirectToHome from \"../../components/RedirectToHome\";\r\n\r\nconst Routing: React.FC = () => {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={RedirectToHome}/>\r\n                <Route path=\"/my-web-site\" exact component={MainPage}/>\r\n                <Route path=\"/my-web-site/links\" component={LinksPage}/>\r\n                <Route path=\"/my-web-site/about\" component={AboutPage}/>\r\n                <Route path=\"/my-web-site/games\" component={GamesPage}/>\r\n                <Route path=\"/my-web-site/sw/\" component={StarWarsPage}/>\r\n                <Route path=\"*\" exact component={NotFound}/>\r\n            </Switch>\r\n            <Footer/>\r\n        </>\r\n    )\r\n}\r\nexport default Routing;\r\n","type card = {\r\n    link: string,\r\n    title: string\r\n}\r\n\r\nexport type initialStateTechnologiesType = Array<card>;\r\n\r\nconst initialState: Array<card> = [\r\n    {\r\n        link: \"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/full/react.png\",\r\n        title: \"React\"\r\n    },\r\n    {\r\n        link: \"https://cdn.worldvectorlogo.com/logos/css3.svg\",\r\n        title: \"CSS\"\r\n    },\r\n    {\r\n        link: \"https://upload.wikimedia.org/wikipedia/commons/thumb/6/61/HTML5_logo_and_wordmark.svg/1200px-HTML5_logo_and_wordmark.svg.png\",\r\n        title: \"HTML\"\r\n    },\r\n    {\r\n        link: \"https://cdn.iconscout.com/icon/free/png-512/redux-283024.png\",\r\n        title: \"Redux\"\r\n    },\r\n    {\r\n        link: \"https://cdn.worldvectorlogo.com/logos/apollo-graphql-compact.svg\",\r\n        title: \"Apollo\"\r\n    },\r\n    {\r\n        link: \"https://user-images.githubusercontent.com/4254571/67077774-a4533c80-f1af-11e9-9433-d836ef6f137d.png\",\r\n        title: \"React saga\"\r\n    },\r\n    {\r\n        link: \"https://polyakovdmitriy.ru/wp-content/uploads/2019/05/nodejs.png.pagespeed.ce_.9zN9M5IW0F.png\",\r\n        title: \"Node js\"\r\n    },\r\n    {\r\n        link: \"https://upload.wikimedia.org/wikipedia/commons/6/64/Expressjs.png\",\r\n        title: \"Express js\"\r\n    },\r\n    {\r\n        link: \"https://cdn.worldvectorlogo.com/logos/socket-io.svg\",\r\n        title: \"Socket.io\"\r\n    },\r\n    {\r\n        link: \"https://www.ict360.cloud/wp-content/uploads/2017/10/mongo.png\",\r\n        title: \"Mongo db\"\r\n    }\r\n]\r\n\r\n\r\nexport default (state: Array<card> = initialState, action: any) => {\r\n    return state;\r\n}\r\n\r\n\r\n","import axios from \"axios\";\r\n\r\nclass SWApiService {\r\n    _apiBase = \"https://swapi.dev/api/\";\r\n    _imageBase = \"https://starwars-visualguide.com/assets/img/\";\r\n\r\n    _validIds = {\r\n        planets: [],\r\n        starships: [],\r\n        persons: [],\r\n    }\r\n\r\n    getResource = async (url:string) =>{\r\n        const res = await axios.get(`${this._apiBase}${url}`);\r\n        if (res.statusText!==\"OK\"&&res.statusText!==\"\") throw new Error(`Could not fetch status: ${res.status}`);\r\n        return res.data;\r\n    };\r\n\r\n    getImagePerson = (person:any) => `${this._imageBase}characters/${this._extractId(person)}.jpg`;\r\n    getImagePlanet = (planet:any) => `${this._imageBase}planets/${this._extractId(planet)}.jpg`;\r\n    getImageStarship = (starship:any) => `${this._imageBase}starships/${this._extractId(starship)}.jpg`;\r\n\r\n    getAllObjects =  async(template:string)=> {\r\n        const response = await this.getResource(`${template}/`);\r\n        return response.results.map(this._transformArrayResponse);\r\n    };\r\n\r\n    getPerson = async (id:number)=> {\r\n        const response = await this.getResource(`people/${id}/`);\r\n        return this._transformPeople(response);\r\n    };\r\n\r\n    getPlanet = async (id:number) => {\r\n        const response = await this.getResource(`planets/${id}/`);\r\n        return this._transformPlanet(response);\r\n    };\r\n\r\n    getStarship = async (id:number) =>{\r\n        const response = await this.getResource(`starships/${id}/`);\r\n        return this._transformStarship(response);\r\n    };\r\n\r\n    getRandomObjects = async () => {\r\n\r\n    };\r\n\r\n    _extractId = ({url}:any)=> {\r\n        const idRegExp = /\\/([0-9]*)\\/$/;\r\n        return url.match(idRegExp)[1]\r\n    };\r\n\r\n    _transformPlanet = (planet:any) => {\r\n        return {\r\n            id: this._extractId(planet),\r\n            img: this.getImagePlanet(planet),\r\n            name: planet.name,\r\n            population: planet.population,\r\n            rotationPeriod: planet.rotation_period,\r\n            diameter: planet.diameter\r\n        }\r\n    };\r\n\r\n    _transformPeople = (person:any) => {\r\n        return {\r\n            id: this._extractId(person),\r\n            img: this.getImagePerson(person),\r\n            name: person.name,\r\n            gender: person.gender,\r\n            height: person.height,\r\n            eyeColor: person.eye_color\r\n        }\r\n    };\r\n\r\n    _transformStarship = (starship:any) => {\r\n        return{\r\n            id: this._extractId(starship),\r\n            img: this.getImageStarship(starship),\r\n            name:starship.name,\r\n            model:starship.model,\r\n            costInCredits:starship.cost_in_credits,\r\n            starshipClass:starship.starship_class\r\n        }\r\n    };\r\n\r\n    _transformArrayResponse = (elem:any) => ({\r\n        id:this._extractId(elem),\r\n        name:elem.name\r\n    });\r\n}\r\n\r\nexport default new SWApiService();\r\n","export function randomInteger(min:number, max:number):number {\r\n    const rand = min - 0.5 + Math.random() * (max - min + 1);\r\n    return Math.round(rand);\r\n}\r\n","import SWApiService from \"../../service/swapiService\";\r\nimport {LOAD_RANDOM_OBJECTS, LOAD_SW_LIST, LOAD_SW_PERSON, LOAD_SW_PLANET, LOAD_SW_STARSHIP} from \"./actionTypes\";\r\nimport {person, starship, planet, swList} from \"./reducer\";\r\nimport {putRandomObjects, putList, putPersons, putPlanet, putStarship} from \"./actions\";\r\nimport { takeEvery, put, call } from \"redux-saga/effects\";\r\nimport {randomInteger} from \"../../helpers/randomNumber\";\r\n\r\nfunction* workerLoadRandomObjects() {\r\n    const person:person = yield call(()=>SWApiService.getPerson(randomInteger(1,10)));\r\n    const planet:planet = yield call(()=>SWApiService.getPlanet(randomInteger(2,10)));\r\n    const validNumbers = [5,9,10];\r\n    const starship:starship = yield call(()=>SWApiService.getStarship(validNumbers[randomInteger(0,2)]));\r\n    yield put(putRandomObjects({planet, starship, person}));\r\n}\r\nfunction* workerLoadPersonList(action:any) {\r\n    const list:swList = yield call(()=>SWApiService.getAllObjects(action.payload));\r\n    yield put(putList(list));\r\n}\r\n\r\nfunction* workerLoadPerson(action:any){\r\n    const person:person = yield call(()=>SWApiService.getPerson(action.payload));\r\n    yield put(putPersons(person))\r\n}\r\nfunction* workerLoadPlanet(action:any){\r\n    const planet:planet = yield call(()=>SWApiService.getPlanet(action.payload));\r\n    yield put(putPlanet(planet))\r\n}\r\nfunction* workerLoadStarship(action:any){\r\n    const starship:starship = yield call(()=>SWApiService.getStarship(action.payload));\r\n    yield put(putStarship(starship));\r\n}\r\n\r\nexport function* watchLoadData() {\r\n    yield takeEvery(LOAD_RANDOM_OBJECTS, workerLoadRandomObjects);\r\n    yield takeEvery(LOAD_SW_LIST, workerLoadPersonList);\r\n    yield takeEvery(LOAD_SW_PERSON, workerLoadPerson);\r\n    yield takeEvery(LOAD_SW_PLANET, workerLoadPlanet);\r\n    yield takeEvery(LOAD_SW_STARSHIP, workerLoadStarship);\r\n}\r\n","interface defaultData {\r\n    img:string\r\n    id:string\r\n    name:string\r\n}\r\n\r\nexport interface person extends defaultData{\r\n    height:string\r\n    eyeColor:string\r\n    gender:string\r\n}\r\n\r\nexport interface planet extends defaultData {\r\n    diameter:number\r\n    population:number\r\n    rotationPeriod:number\r\n}\r\n\r\nexport interface starship extends defaultData {\r\n    model:string\r\n    costInCredits:number\r\n    starshipClass:number\r\n}\r\n\r\ntype swListElementType = {\r\n    id:number\r\n    name:string\r\n}\r\n\r\nexport type swList = Array<swListElementType>;\r\nexport type allObjectsType = {\r\n    planet?:planet,\r\n    person?:person,\r\n    starship?:starship\r\n}\r\nexport type initialStateSWType = {\r\n    object?:allObjectsType\r\n    list?:swList\r\n    randomObjects?: allObjectsType\r\n}\r\n\r\nconst initialState:initialStateSWType = {\r\n    object:{},\r\n    list:[],\r\n    randomObjects:{}\r\n}\r\nexport default (state:initialStateSWType = initialState, action:any) => {\r\n    switch (action.type) {\r\n        case \"PUT_SW_LIST\":\r\n            return {\r\n                ...state,\r\n                list:action.payload\r\n            }\r\n        case \"PUT_SW_CHARACTER\":\r\n            return {\r\n                ...state,\r\n                object:{...state.object, ...action.payload}\r\n            }\r\n        case \"PUT_RANDOM_OBJECTS\":\r\n            return {\r\n                ...state,\r\n                randomObjects:action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {\r\n    createStore,\r\n    applyMiddleware,\r\n    combineReducers\r\n} from 'redux';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport thunk from 'redux-thunk';\r\nimport createSagaMiddleware from \"redux-saga\";\r\n// @ts-ignore\r\nimport { createBrowserHistory } from 'history';\r\nimport TechnologiesReducer, {initialStateTechnologiesType} from \"../src/containers/Technologies/reducer\";\r\nimport LinksReducer, {initialStateLinksType} from \"../src/containers/Links/reducer\";\r\nimport {watchLoadData} from \"./containers/SWContainer/sagas\";\r\nimport SWReducer, {initialStateSWType} from \"./containers/SWContainer/reducer\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nconst initialState = {};\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middlewares = [\r\n    thunk,\r\n    sagaMiddleware,\r\n    routerMiddleware(history)\r\n];\r\n\r\nconst reducers = {\r\n    technologies:TechnologiesReducer,\r\n    links:LinksReducer,\r\n    starWars:SWReducer\r\n}\r\n\r\nconst composedEnhancers = composeWithDevTools(\r\n    applyMiddleware(...middlewares)\r\n);\r\n\r\nconst rootReducer = combineReducers({\r\n    router: connectRouter(history),\r\n    ...reducers\r\n});\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composedEnhancers\r\n);\r\nsagaMiddleware.run(watchLoadData);\r\n\r\nexport type rootStateType = {\r\n    technologies:initialStateTechnologiesType\r\n    links:initialStateLinksType\r\n    starWars:initialStateSWType\r\n    router:any\r\n}\r\n\r\nexport default store;\r\n","export type linkCard = {\r\n    avatar: string\r\n    linkToProfile: string\r\n    name: string\r\n    nickname: string\r\n};\r\n\r\nexport type initialStateLinksType = Array<linkCard>;\r\n\r\nexport default (state:initialStateLinksType = [], action:any) => {\r\n    switch (action.type) {\r\n        case \"LOAD_POSTS\":\r\n            return action.payload;\r\n        case \"DELETE_POSTS\":\r\n            return [];\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport './App.scss';\r\n// @ts-ignore\r\nimport { Provider } from 'react-redux';\r\nimport {ConnectedRouter} from \"connected-react-router\";\r\nimport Routing from \"./containers/Routing\"\r\nimport store, {history} from \"./store\";\r\n\r\nconst App:React.FC = () => (\r\n    <Provider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            <Routing />\r\n        </ConnectedRouter>\r\n    </Provider>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nconst root = document.getElementById('root');\r\n\r\nReactDOM.render(<App />, root);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}