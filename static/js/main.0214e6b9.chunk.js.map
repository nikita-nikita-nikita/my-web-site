{"version":3,"sources":["images/me.jpg","serviceWorker.ts","service/myApiService/index.ts","containers/AuthProfileContainer/actions.ts","containers/AuthProfileContainer/actionTypes.ts","containers/Routing/priviteRoute/index.tsx","containers/Routing/publicRoute/index.tsx","pages/NotFound/index.tsx","components/InfoCard/index.tsx","containers/Technologies/actions.ts","containers/Technologies/actionTypes.ts","containers/Technologies/index.tsx","components/ModalWindow/index.tsx","pages/HelloPage/index.tsx","pages/MainPage/index.tsx","components/LinkCard/index.tsx","components/Spinner/index.tsx","service/apiLinksService/index.ts","containers/Links/actions.ts","containers/Links/index.tsx","containers/Links/actionTypes.ts","pages/LinksPage/index.tsx","components/CharacterCard/index.tsx","components/BeautifulList/index.tsx","pages/AboutPage/index.tsx","pages/GamePage/index.tsx","components/SWComponents/SWSwitchPanel/index.tsx","components/SWComponents/SWRandomObject/index.tsx","components/SWComponents/SWRandomObjectsContainer/index.tsx","containers/SWContainer/actions.ts","containers/SWContainer/actionTypes.ts","components/SWComponents/SWHello/index.tsx","components/SWComponents/SWList/index.tsx","components/SWComponents/SWCharacter/index.tsx","components/SWComponents/SWCards/SWPlanetCard/index.tsx","components/SWComponents/SWCards/SWPersonCard/index.tsx","components/SWComponents/SWCards/SWStarshipCard/index.tsx","containers/SWContainer/index.tsx","pages/StarWarsPage/index.tsx","containers/Notifications/actions.ts","containers/Notifications/actionTypes.ts","containers/AuthProfileContainer/auth/login/index.tsx","pages/loginPage/index.tsx","containers/AuthProfileContainer/auth/register/index.tsx","pages/RegisterPage/index.tsx","helpers/imgHelper.ts","components/Header/index.tsx","components/Footer/index.tsx","components/RedirectToHome/index.tsx","helpers/ifNotUndefined.ts","containers/imageService/index.ts","service/imgService/index.ts","containers/AuthProfileContainer/profile/index.tsx","pages/ProfilePage/index.tsx","containers/Notifications/index.tsx","containers/Routing/index.tsx","containers/SWContainer/reducer.ts","service/swapiService/index.ts","helpers/randomNumber.ts","containers/SWContainer/sagas.ts","store.ts","containers/Technologies/reducer.ts","containers/Links/reducer.ts","containers/AuthProfileContainer/reducer.ts","containers/Notifications/reducer.ts","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","myAxios","axios","create","baseURL","headers","token","localStorage","getItem","loginRequest","loginData","post","registerRequest","registerData","changeUserRequest","userData","put","loadCurrentUserRequest","get","deleteUserRequest","uuid","password","delete","setToken","setItem","putUserToState","dispatch","apiFunction","a","data","user","type","payload","deleteUserFromState","removeItem","connect","state","profile","component","path","Object","keys","length","to","NotFound","className","InfoCard","link","title","src","alt","loadTechnologiesAction","Technologies","mapDispatchToProps","loadTechnologies","deleteTechnologies","rootState","links","technologies","useState","isToggled","toggleCards","useEffect","test","navigator","userAgent","onMouseOver","onMouseOut","onClick","event","target","classList","contains","toggle","map","index","key","animation","as","ModalWindow","children","show","setShow","onClose","includes","Icon","name","HelloMessageComponent","MainPage","LinkCard","avatar","linkToProfile","nickname","copied","setCopied","hovered","setHovered","input","useRef","href","rel","Input","fluid","value","ref","e","select","document","execCommand","focus","onBlur","aria-describedby","role","aria-hidden","style","opacity","id","Spinner","Dimmer","active","Loader","getInstagram","then","graphql","profile_pic_url_hd","username","getGithub","avatar_url","login","getTelegram","getGmail","apiLinksService","actions","loadLinks","console","log","deleteLinks","bindActionCreators","isLoading","setLoading","LinksPage","CharacterCard","imgLink","fullScreenCardClass","isRandomObject","isStarWars","isVertical","isInsideContainer","BeautifulList","me","AboutPage","img","width","GamesPage","SWSwitchPanel","RandomObject","isFullScreen","RandomObjectsContainer","randomObjects","person","planet","starship","isShown","setIsShown","height","gender","eyeColor","diameter","population","rotationPeriod","model","starshipClass","costInCredits","loadList","template","putList","list","putPersons","putPlanet","putStarship","SWHello","SWList","deleteList","object","history","useHistory","push","item","toString","SWCharacter","loadFunction","SWPlanetCard","loadPlanet","SWPersonCard","loadPerson","SWStarshipCard","loadStarship","loadRandomObjects","loadPersonList","loadStarshipList","loadPlanetList","starWars","useInterval","exact","render","params","StarWarsPage","setError","errorMessage","message","setInfo","loginUser","email","setEmail","setPassword","isEmailValid","setIsEmailValid","isPasswordValid","setIsPasswordValid","submit","response","Form","size","onSubmit","Segment","icon","iconPosition","placeholder","error","onChange","ev","isEmail","Button","color","loading","primary","LoginPage","register","registerUser","confirmedPassword","setConfirmedPassword","setEmailValid","setPasswordValid","RegisterPage","getImageAvatar","url","Header","showContextMenu","setShowContextMenu","toggleContextMenu","contextMenu","imageUrl","Footer","RedirectToHome","ifNotUndefined","toCheck","defaultValue","Context","createContext","loadImageLink","file","formData","FormData","append","deleteImageLink","Provider","change","signOut","del","getRootState","saveChangedImage","patch","changeUser","signOutUser","deleteUser","saveImage","phoneNumber","setPhoneNumber","setUsername","newPassword","setNewPassword","currentPassword","setCurrentPassword","newImage","setNewImage","phoneNumberError","setPhoneNumberError","emailError","setEmailError","newPasswordError","setNewPasswordError","changeProfile","setChangeProfile","changePassword","setChangePassword","isImageChanged","setIsImageChanged","imageService","useContext","beforeRequestToServer","form","validator","isMobilePhone","getImageLink","files","deleteImage","saveNewImage","accept","ProfilePage","notification","NotificationManager","getCurrentUser","initialState","_apiBase","_imageBase","getResource","res","statusText","Error","status","getImagePerson","_extractId","getImagePlanet","getImageStarship","getAllObjects","results","_transformArrayResponse","getPerson","_transformPeople","getPlanet","_transformPlanet","getStarship","_transformStarship","getRandomObjects","rotation_period","eye_color","cost_in_credits","starship_class","elem","randomInteger","min","max","rand","Math","random","round","workerLoadRandomObjects","workerLoadPersonList","workerLoadPerson","workerLoadPlanet","workerLoadStarship","watchLoadData","call","SWApiService","validNumbers","action","takeEvery","createBrowserHistory","sagaMiddleware","createSagaMiddleware","middlewares","thunk","routerMiddleware","reducers","composedEnhancers","composeWithDevTools","applyMiddleware","rootReducer","combineReducers","router","connectRouter","store","createStore","run","App","root","getElementById","ReactDOM","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0214e6b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.3643d8ed.jpg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport {card} from \"../../containers/Technologies/reducer\";\r\nimport {Profile} from \"../../containers/AuthProfileContainer/reducer\";\r\n\r\nconst mode = \"prod\";\r\n\r\n// @ts-ignore\r\nconst myApiServiceBaseUrl = (mode === \"dev\") ? \"http://localhost:8080/api\" : \"https://my-web-site-back.herokuapp.com/api\";\r\n\r\nexport type BaseRequestDataType = {\r\n    email:string\r\n    password:string\r\n}\r\n\r\nexport type ResponseDataType = {\r\n    token:string\r\n    user:Profile\r\n};\r\n\r\nconst myAxios = axios.create({\r\n    baseURL: myApiServiceBaseUrl,\r\n    headers: {token:window.localStorage.getItem(\"token\")}\r\n});\r\n\r\nexport const getTechnologiesRequest  = () =>\r\n    myAxios.get<Array<card>>(`/technologies`);\r\n\r\nexport const loginRequest = (loginData:BaseRequestDataType) =>\r\n    myAxios.post<ResponseDataType>('/auth/login', loginData);\r\n\r\nexport const registerRequest = (registerData:BaseRequestDataType) =>\r\n    myAxios.post<ResponseDataType>('/auth/register', registerData);\r\n\r\nexport const changeUserRequest = (userData:BaseRequestDataType) =>\r\n    myAxios.put<ResponseDataType>('/auth/change', userData);\r\n\r\nexport const loadCurrentUserRequest = () =>\r\n    myAxios.get<ResponseDataType>('/auth/user');\r\n\r\nexport const deleteUserRequest = (uuid:string, password:string) =>\r\n    myAxios.delete<ResponseDataType>(`/auth/user${uuid}`,{headers: {password}});\r\n\r\nexport const saveImage = () =>\r\n    myAxios.patch<{message:string}>(`/img`);\r\n\r\nexport default myAxios;\r\n","import {PUT_PROFILE, PUT_IMAGE} from \"./actionTypes\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {GetRootStateType} from \"../../store\";\r\nimport {\r\n    loginRequest,\r\n    registerRequest,\r\n    loadCurrentUserRequest,\r\n    changeUserRequest,\r\n    deleteUserRequest,\r\n    BaseRequestDataType,\r\n    ResponseDataType,\r\n    saveImage\r\n} from \"../../service/myApiService\";\r\nimport {ProfileDispatch as Dispatch} from \"./reducer\";\r\n\r\nconst setToken = (token:string) => localStorage.setItem(\"token\", token);\r\n\r\ntype ApiFuncPostOrPut = (data:BaseRequestDataType)=>Promise<AxiosResponse<ResponseDataType>>;\r\n\r\ntype ApiFuncGet = () => Promise<AxiosResponse<ResponseDataType>>;\r\n\r\nconst putUserToState = async (dispatch:Dispatch, apiFunction: ApiFuncPostOrPut|ApiFuncGet, userData?:BaseRequestDataType):Promise<void> => {\r\n    // @ts-ignore\r\n    const {data:{token, user}} = await apiFunction(userData);\r\n    setToken(token);\r\n    dispatch({\r\n        type: PUT_PROFILE,\r\n        payload: user\r\n    })\r\n}\r\n\r\nconst deleteUserFromState = (dispatch: Dispatch) => {\r\n    localStorage.removeItem(\"token\");\r\n    dispatch({\r\n        type: PUT_PROFILE,\r\n        payload: {}\r\n    })\r\n}\r\n\r\nexport const login = (userData:BaseRequestDataType) => async (dispatch:Dispatch) =>\r\n    putUserToState(dispatch, loginRequest, userData);\r\n\r\nexport const register = (userData:BaseRequestDataType) => async (dispatch:Dispatch) =>\r\n    putUserToState(dispatch, registerRequest, userData);\r\n\r\nexport const getCurrentUser = () => async (dispatch:Dispatch) =>\r\n    putUserToState(dispatch, loadCurrentUserRequest);\r\n\r\nexport const change = (userData:BaseRequestDataType) => async (dispatch:Dispatch) =>\r\n    putUserToState(dispatch, changeUserRequest, userData);\r\n\r\nexport const signOut = () => (dispatch:Dispatch) => deleteUserFromState(dispatch);\r\n\r\nexport const del = (password:string) => async (dispatch:Dispatch, getRootState:GetRootStateType) => {\r\n    await deleteUserRequest(getRootState().profile.uuid, password);\r\n    deleteUserFromState(dispatch);\r\n};\r\n\r\nexport const saveChangedImage = (imageUrl:string) => async (dispatch:Dispatch) => {\r\n    const {data: {message}} = await saveImage();\r\n    if (message) dispatch({\r\n        type:PUT_IMAGE,\r\n        payload:imageUrl\r\n    });\r\n}\r\n","export const PUT_PROFILE:string = \"PUT_PROFILE\";\r\nexport const PUT_IMAGE:string = \"PUT_IMAGE\";\r\n","import React from \"react\";\r\nimport {Route, Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {Profile} from \"../../AuthProfileContainer/reducer\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport {MapStateToPropsType} from \"../../../store\";\r\n\r\ntype Props = {\r\n    user:Profile|{}\r\n    path:string\r\n    component:React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n}\r\n\r\nconst PrivateRoute:React.FunctionComponent<Props> = ({component, path, user}) =>\r\n    Object.keys(user).length===0\r\n        ? <Redirect to=\"/my-web-site/login\"/>\r\n        : <Route path={path} component={component}/>\r\n\r\nconst mapStateToProps:MapStateToPropsType<{user:Profile}> = state => ({\r\n    user:state.profile\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from \"react\";\r\nimport {Route, Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {Profile} from \"../../AuthProfileContainer/reducer\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport {MapStateToPropsType} from \"../../../store\";\r\n\r\ntype Props = {\r\n    user:Profile|{}\r\n    path:string\r\n    component:React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n}\r\n\r\nconst PublicRoute:React.FunctionComponent<Props> = ({component, path, user}) =>\r\n    Object.keys(user).length===0\r\n        ? <Route path={path} component={component}/>\r\n        : <Redirect to=\"/my-web-site/\"/>\r\n\r\nconst mapStateToProps:MapStateToPropsType<{user:Profile}> = state => ({\r\n    user:state.profile\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);\r\n","import React from \"react\";\r\n\r\nconst NotFound: React.FC = () => (<h2 className=\"no-footer\">Not Found!</h2>);\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport \"./stylesInfoCard.scss\"\r\n\r\ntype Props = {\r\n    link: string,\r\n    title: string\r\n}\r\n\r\nconst InfoCard:React.FC<Props> = ({link, title}) => {\r\n    return (\r\n        <div className=\"info-card-container\">\r\n            <img src={link} className=\"img\" alt={title} />\r\n            <h2 className=\"title\">{title}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoCard;\r\n","import {LOAD_TECHNOLOGIES} from \"./actionTypes\";\r\nimport {Dispatch} from \"redux\";\r\nimport {card} from \"./reducer\";\r\nimport {getTechnologiesRequest} from \"../../service/myApiService\";\r\n\r\nconst loadTechnologiesAction = (Technologies:Array<card>) => ({\r\n    type: LOAD_TECHNOLOGIES,\r\n    payload: Technologies\r\n})\r\n\r\nexport const loadTechnologies = () => async (dispatch:Dispatch) => {\r\n    const {data} = await getTechnologiesRequest();\r\n    dispatch(loadTechnologiesAction(data))\r\n}\r\n\r\nexport const deleteTechnologies = () => async (dispatch:Dispatch) => {\r\n    dispatch(loadTechnologiesAction([]))\r\n}\r\n","export const LOAD_TECHNOLOGIES = \"LOAD_TECHNOLOGIES\";\r\n","import React, {useState, MouseEvent, useEffect} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport InfoCard from \"../../components/InfoCard\";\r\nimport \"./stylesTechnologies.scss\";\r\nimport {card} from \"./reducer\";\r\nimport {rootStateType} from \"../../store\";\r\nimport {loadTechnologies, deleteTechnologies} from \"./actions\";\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\ninterface actionOnPC {\r\n    onClick(event: MouseEvent<HTMLDivElement>|any):void\r\n}\r\ninterface actionOnMobile {\r\n    onMouseOver():void\r\n    onMouseOut():void\r\n}\r\nconst toggle = (toggleCards:Function):(actionOnMobile|actionOnPC)  => (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))\r\n    ?{\r\n        onMouseOver() {\r\n            toggleCards(true);\r\n        },\r\n        onMouseOut() {\r\n            toggleCards(false);\r\n        },\r\n    }\r\n    :{\r\n        onClick(event) {\r\n            if(event.target.classList.contains('info-cards')||event.target.classList.contains('technologies-title'))\r\n            toggleCards((isToggled:boolean)=>!isToggled)\r\n        }\r\n    }\r\ntype Props = {\r\n    links: Array<card>\r\n    loadTechnologies: Function\r\n    deleteTechnologies: Function\r\n}\r\nconst Technologies: React.FC<Props> = ({links= [], loadTechnologies, deleteTechnologies}) => {\r\n    const [isToggled, toggleCards] = useState(false);\r\n    useEffect(()=> {\r\n        loadTechnologies();\r\n        return () => deleteTechnologies();\r\n    }, [loadTechnologies, deleteTechnologies]);\r\n    return links.length ? (\r\n        <div className=\"technologies-section\">\r\n            <div>\r\n                <div className={`info-cards${isToggled?\" toggled\":\"\"}`} {...toggle(toggleCards)}>\r\n                    <h1 className=\"technologies-title\">Technologies</h1>\r\n                    {links?.map(({link, title}, index) =>\r\n                        (<InfoCard\r\n                            key={index}\r\n                            link={link}\r\n                            title={title}/>)\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ) : <div><Spinner animation=\"grow\" as=\"div\"/></div>;\r\n};\r\n\r\nconst mapStateToProps = (rootState: rootStateType) => ({\r\n    links: rootState.technologies\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    loadTechnologies,\r\n    deleteTechnologies\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Technologies);\r\n","import React, {useState} from 'react';\r\nimport './stylesModalWindow.scss';\r\nimport {Icon} from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    title: string,\r\n    children: string\r\n}\r\n\r\nconst ModalWindow: React.FC<Props> = ({title, children}) => {\r\n    const [show, setShow] = useState(true)\r\n    const onClose = ({ target }: any) => {\r\n        const { className } = target;\r\n        if(className==='popup-body'||className.includes('popup-close-btn')||className.includes('close icon')) setShow(false);\r\n    }\r\n\r\n    return (\r\n        <div className={(show) ? 'popup open' : 'popup close'}>\r\n            <div className=\"popup-body\" onClick={onClose}>\r\n                <div className=\"popup-content\">\r\n                    <h2 className=\"popup-title\">{title}</h2>\r\n                    {children}\r\n                    <div className=\"popup-close\">\r\n                        <button className=\"popup-close-btn\" onClick={onClose}>\r\n                            <Icon name=\"close\"/>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModalWindow;\r\n","import React from \"react\";\r\nimport ModalWindow from \"../../components/ModalWindow\";\r\n\r\nconst body: string =\r\n`I glad to see you here, wanderer.\r\nDon't know why you here, but it's good especially for me.\r\nThis site was made by using react and typescript`\r\n\r\n\r\nconst HelloMessageComponent = () => <ModalWindow title=\"Welcome to my website\">\r\n    {body}\r\n</ModalWindow>\r\n\r\nexport default HelloMessageComponent;\r\n","import React from \"react\";\r\nimport Technologies from \"../../containers/Technologies\";\r\nimport HelloMessageComponent from \"../HelloPage\";\r\n\r\nconst MainPage: React.FC = () => (\r\n    <main className=\"no-footer\">\r\n        <Technologies />\r\n        <HelloMessageComponent />\r\n    </main>\r\n\r\n);\r\n\r\nexport default MainPage;\r\n","import React, {useRef, useState} from \"react\";\r\nimport \"./stylesLinkCard.scss\";\r\nimport {Icon, Input, StrictIconProps} from \"semantic-ui-react\";\r\n\r\ninterface Props extends StrictIconProps{\r\n    avatar?: string\r\n    linkToProfile: string\r\n    nickname: string\r\n    name:StrictIconProps|any\r\n    linkToCopy?:string\r\n}\r\nconst LinkCard: React.FC<Props> = ({avatar, linkToProfile, name, nickname}) => {\r\n    const [copied, setCopied] = useState(false);\r\n    const [hovered, setHovered] = useState(false);\r\n    let input: any = useRef();\r\n    const copyToClipboard = (e: any) => {\r\n        input.select();\r\n        document.execCommand('copy');\r\n        e.target.focus();\r\n        setCopied(true);\r\n    };\r\n    const shouldShowElement = ({target}:any) => {\r\n        const isNotTooltip:boolean = !(\r\n            target.classList.contains(\"arrow\")||\r\n            target.classList.contains(\"tooltip\")||\r\n            target.classList.contains(\"tooltip-text\")\r\n        );\r\n        if(isNotTooltip) setHovered(true);\r\n    }\r\n    return (\r\n        <div className=\"link-card\">\r\n            <div className=\"account-info\">\r\n                <a href={linkToProfile} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    {\r\n                        avatar\r\n                            ?(\r\n                                <>\r\n                                    <img className=\"avatar-link\" src={avatar} alt=\"Avatar\"/>\r\n                                </>\r\n                            )\r\n                            : <img className=\"avatar-link\" src=\"https://forwardsummit.ca/wp-content/uploads/2019/01/avatar-default.png\" alt=\"Avatar\"/>\r\n                    }\r\n                    <p className=\"nickname\">{nickname}</p>\r\n                </a>\r\n            </div>\r\n            <div className=\"content-below\">\r\n                <p className=\"icon-link\">\r\n                    <Icon name={name}/>\r\n                </p>\r\n                <div className=\"input-container\">\r\n                    <Input\r\n                        fluid\r\n                        value={nickname}\r\n                        ref={ref => {\r\n                            input = ref;\r\n                        }}\r\n                    />\r\n                </div>\r\n                <button\r\n                    className=\"copy-link-button\"\r\n                    onClick={copyToClipboard}\r\n                    onMouseOver={shouldShowElement}\r\n                    onMouseOut={()=> setHovered(false)}\r\n                    onBlur={()=> setCopied(false)}\r\n                    aria-describedby={`tooltip-${name}`}\r\n                    >\r\n                    Copy <Icon name=\"copy\"/>\r\n                    <div\r\n                        className=\"tooltip\"\r\n                        role=\"tooltip\"\r\n                        aria-hidden={!hovered}\r\n                        style={{opacity:(hovered?1:0)}}\r\n                        id={`tooltip-${name}`}>\r\n                        <div className=\"tooltip-text\">{copied?'Copied':'Copy to clipboard'}</div>\r\n                        <div className=\"arrow\"/>\r\n                    </div>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default LinkCard;\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nconst Spinner:React.FC = () => (\r\n    <Dimmer active>\r\n        <Loader />\r\n    </Dimmer>\r\n);\r\n\r\nexport default Spinner;\r\n","import axios from 'axios';\r\n\r\nclass apiLinksService {\r\n    getInstagram = () => {\r\n        return axios.get(\"https://www.instagram.com/nikita_good_guy/?__a=1\")\r\n            .then(({data:{graphql:{user:{profile_pic_url_hd:avatar, username: nickname}} }})=>\r\n                ({avatar, nickname, name:'instagram', linkToProfile:`https://www.instagram.com/${nickname}/`}))\r\n    }\r\n\r\n    getGithub = () => {\r\n       return axios.get(\"https://api.github.com/users/nikita-nikita-nikita\")\r\n           .then(({data:{avatar_url:avatar, login:nickname}})=>\r\n               ({avatar, nickname, name:'github', linkToProfile:`https://github.com/${nickname}`}))\r\n    }\r\n\r\n    // telegram don't have api to take info about profile ¯\\_(ツ)_/¯\r\n    getTelegram = async () => ({nickname:\"@STALINNASHPRESIDENT\" /*rofl*/ , name:'telegram', linkToProfile:\"tg://tele.gg/STALINNASHPRESIDENT\"});\r\n\r\n    getGmail = async () => ({nickname:\"neymarenko123@gmail.com\", name:'mail', linkToProfile:\"mailto:neymarenko123@gmail.com?Body\"});\r\n}\r\n\r\nexport default new apiLinksService();\r\n","import {\r\n    DELETE_POSTS,\r\n    LOAD_POSTS\r\n} from './actionTypes';\r\n\r\nimport apiLinksService from \"../../service/apiLinksService\";\r\n\r\nexport const loadLinks = () => async (dispatch:any) =>{\r\n    console.log(\"load\");\r\n    dispatch({type:LOAD_POSTS, payload:[(await apiLinksService.getGithub()),(await apiLinksService.getInstagram()),(await apiLinksService.getGmail()),(await apiLinksService.getTelegram())]})\r\n    return {}\r\n}\r\napiLinksService.getGithub();\r\n\r\nexport const deleteLinks = () => (dispatch:any) =>{\r\n    dispatch({type:DELETE_POSTS})\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport LinkCard from \"../../components/LinkCard\";\r\nimport Spinner from \"../../components/Spinner\";\r\nimport \"./stylesLinks.scss\";\r\nimport { bindActionCreators } from 'redux';\r\nimport {connect} from \"react-redux\";\r\nimport {loadLinks, deleteLinks} from \"./actions\";\r\nimport {initialStateLinksType} from \"./reducer\";\r\nimport {rootStateType} from \"../../store\";\r\n\r\ninterface Props {\r\n    links?:initialStateLinksType,\r\n    loadLinks?():Promise<{}>\r\n    deleteLinks?():void\r\n}\r\n\r\nconst Links:React.FC<Props> = ({links, loadLinks, deleteLinks}) => {\r\n    const [isLoading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        if(loadLinks) loadLinks().then(()=>setLoading(false));\r\n        if(deleteLinks) return () => deleteLinks();\r\n    }, [loadLinks, deleteLinks]);\r\n    if(isLoading) return <Spinner/>;\r\n    return (\r\n        <div className=\"links\">\r\n            {links?.map(data=>\r\n                <LinkCard {...data}/>)}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (rootState:rootStateType)=>({\r\n    links:rootState.links\r\n});\r\n\r\nconst actions:any = {\r\n    loadLinks,\r\n    deleteLinks\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch:any) => bindActionCreators(actions, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Links);\r\n","export const LOAD_POSTS = \"LOAD_POSTS\";\r\nexport const DELETE_POSTS = \"DELETE_POSTS\";\r\n","import React from \"react\";\r\nimport \"./stylesLinks.scss\";\r\nimport Links from \"../../containers/Links\";\r\nconst LinksPage = () => (\r\n    <main className=\"no-footer\">\r\n        <Links/>\r\n    </main>\r\n);\r\n\r\nexport default LinksPage;\r\n","import React from \"react\";\r\nimport \"./stylesCharacterCard.scss\";\r\n\r\ninterface Props {\r\n    imgLink:string\r\n    children?: any\r\n    fullScreenCardClass?:boolean\r\n    isRandomObject?:boolean\r\n    isVertical?:boolean\r\n    isInsideContainer?:boolean\r\n    isStarWars?:boolean\r\n}\r\n\r\n// to highlight name add class \"name\"\r\n\r\nconst CharacterCard: React.FC<Props> = ({imgLink, children, fullScreenCardClass, isRandomObject, isStarWars, isVertical, isInsideContainer})=> {\r\n    return(\r\n        <div className=\r\n                 {`character-card`+`${fullScreenCardClass ? ' full-screen-character-card' : ''}${isRandomObject ? ' random-object' : ''}${isVertical ? ' vertical' : ''}${isInsideContainer?' inside-container': ''}${isStarWars? ' sw-card-color': ''}`}>\r\n            <img src={imgLink} className=\"character-img\" alt=\"avatar\"/>\r\n            <ul className=\"stats\">\r\n                {children}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterCard;\r\n","import React from \"react\";\r\nimport \"./stylesBeautifulList.scss\"\r\n\r\ntype Props = {\r\n    title:string\r\n    children:any\r\n    style?: React.CSSProperties\r\n}\r\n\r\nconst BeautifulList:React.FC<Props> = ({title, children, style}) => (\r\n    <label className=\"beautiful-label\" style={style}>\r\n        <input type=\"checkbox\" className=\"about-checkbox\"/>\r\n        <div className=\"checkbox-content\">\r\n            <strong className=\"about-paragraph\">{title}</strong><div className=\"triangle\"/>\r\n            <ul>\r\n                {children}\r\n            </ul>\r\n        </div>\r\n    </label>\r\n);\r\n\r\nexport default BeautifulList;\r\n","import React from \"react\";\r\nimport \"./stylesAbout.scss\";\r\nimport CharacterCard from \"../../components/CharacterCard\";\r\nimport img from \"../../images/me.jpg\";\r\nimport BeautifulList from \"../../components/BeautifulList\";\r\nconst me:any = {\r\n    name: 'Nikita',\r\n    age: 17,\r\n    gender: 'male',\r\n    eyeColor: 'blue'\r\n}\r\n\r\nconst AboutPage = () => (\r\n    <main className=\"about-page no-footer\">\r\n        <h1 className=\"content-before-footer\">About me</h1>\r\n        <CharacterCard imgLink={img} fullScreenCardClass isInsideContainer>\r\n            <li className=\"name\">{me.name}</li>\r\n            <li>Age: {me.age}</li>\r\n            <li>Gender: {me.gender}</li>\r\n            <li>Eye color: {me.eyeColor}</li>\r\n        </CharacterCard>\r\n        <div className=\"about-content\">\r\n            <h2>A little bit more about me</h2>\r\n            <div className=\"about-text\">\r\n                <BeautifulList title=\"Education\" style={{width:'33%'}}>\r\n                    <li>2005-2008 Kindergarten</li>\r\n                    <li>2008-2015 School № 96</li>\r\n                    <li>2015-2019 Lyceum № 142</li>\r\n                    <li>2019-Nowadays Igor Sikorsky Kiev Polytechnic Institute</li>\r\n                </BeautifulList>\r\n                <BeautifulList title=\"Hobby\" style={{width:'33%'}}>\r\n                    <li>Programming</li>\r\n                    <li>Football</li>\r\n                    <li>Volleyball</li>\r\n                    <li>Math</li>\r\n                </BeautifulList>\r\n                <BeautifulList title=\"Character\" style={{width:'33%'}}>\r\n                    <li>Purposeful</li>\r\n                    <li>Team player</li>\r\n                    <li>I like to improve myself and cats</li>\r\n                </BeautifulList>\r\n            </div>\r\n        </div>\r\n    </main>\r\n\r\n);\r\n\r\nexport default AboutPage;\r\n","import React from \"react\";\r\nimport \"./stylesGames.scss\";\r\n\r\nconst GamesPage = () => (<h2 className=\"no-footer\">Games page</h2>);\r\n\r\nexport default GamesPage;\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport \"./stylesSWSwitchPanel.scss\";\r\n\r\nconst SWSwitchPanel: React.FC = () => (\r\n    <nav className=\"sw-control-panel\">\r\n        <div className=\"sw-link sw-characters-link\">\r\n            <Link to=\"/my-web-site/sw/persons/\">\r\n                <p className=\"sw-link-text\">Characters</p>\r\n            </Link>\r\n        </div>\r\n        <div className=\"sw-link sw-planets-link\">\r\n            <Link to=\"/my-web-site/sw/planets/\">\r\n                <p className=\"sw-link-text\">Planets</p>\r\n            </Link>\r\n        </div>\r\n        <div className=\"sw-link sw-starships-link\">\r\n            <Link to=\"/my-web-site/sw/starships/\">\r\n                <p className=\"sw-link-text\">Starships</p>\r\n            </Link>\r\n        </div>\r\n    </nav>\r\n);\r\n\r\nexport default SWSwitchPanel;\r\n","import React from \"react\";\r\nimport \"./stylesSWRandomObject.scss\";\r\nimport CharacterCard from \"../../CharacterCard\";\r\n\r\ntype props = {\r\n    img:string\r\n    children?: any|undefined\r\n    isFullScreen?:boolean\r\n}\r\n\r\nconst RandomObject:React.FC<props> = ({img, children, isFullScreen}) => {\r\n    return <CharacterCard imgLink={img} isRandomObject={!isFullScreen} isStarWars fullScreenCardClass={isFullScreen}>{children}</CharacterCard>\r\n}\r\n\r\n\r\nexport default RandomObject;\r\n","import React, {useState} from \"react\";\r\nimport \"./stylesSWRandomObjectsContainer.scss\";\r\nimport RandomObject from \"../SWRandomObject\";\r\nimport {allObjectsType} from \"../../../containers/SWContainer/reducer\";\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\ntype Props = {\r\n    randomObjects: allObjectsType\r\n}\r\n\r\nconst RandomObjectsContainer: React.FC<Props> = ({randomObjects: {person, planet, starship} = {}}) => {\r\n        const [isShown, setIsShown] = useState(false);\r\n        return (\r\n            <div className=\"sw-full-screen-width\">\r\n                {person && planet && starship\r\n                    ? (\r\n                        <>\r\n                            <div className=\"sw-random-objects-big-container min-width-1000\">\r\n                                <RandomObject img={person.img}>\r\n                                    <li className=\"name\">{person.name}</li>\r\n                                    <li>Height: {person.height}</li>\r\n                                    <li>Gender: {person.gender}</li>\r\n                                    <li>Eye color: {person.eyeColor}</li>\r\n                                </RandomObject>\r\n                                <RandomObject img={planet.img}>\r\n                                    <li className=\"name\">{planet.name}</li>\r\n                                    <li>Diameter: {planet.diameter}</li>\r\n                                    <li>Population: {planet.population}</li>\r\n                                    <li>Rotation period: {planet.rotationPeriod}</li>\r\n                                </RandomObject>\r\n                                <RandomObject img={starship.img}>\r\n                                    <li className=\"name\">{starship.name}</li>\r\n                                    <li>Model: {starship.model}</li>\r\n                                    <li>Starship class: {starship.starshipClass}</li>\r\n                                    <li>Cost in credits: {starship.costInCredits}</li>\r\n                                </RandomObject>\r\n                            </div>\r\n                            <div onClick={() => setIsShown(!isShown)} className=\"sw-random-objects-small-container max-width-1000\">\r\n                                <button>{!isShown ? \"Show random characters\" : \"Hide random characters\"}</button>\r\n                                {isShown ? <div className=\"sw-random-objects-small\">\r\n                                    <RandomObject img={person.img} isFullScreen>\r\n                                        <li className=\"name\">{person.name}</li>\r\n                                        <li>Height: {person.height}</li>\r\n                                        <li>Gender: {person.gender}</li>\r\n                                        <li>Eye color: {person.eyeColor}</li>\r\n                                    </RandomObject>\r\n                                    <RandomObject img={planet.img} isFullScreen>\r\n                                        <li className=\"name\">{planet.name}</li>\r\n                                        <li>Diameter: {planet.diameter}</li>\r\n                                        <li>Population: {planet.population}</li>\r\n                                        <li>Rotation period: {planet.rotationPeriod}</li>\r\n                                    </RandomObject>\r\n                                    <RandomObject img={starship.img} isFullScreen>\r\n                                        <li className=\"name\">{starship.name}</li>\r\n                                        <li>Model: {starship.model}</li>\r\n                                        <li>Starship class: {starship.starshipClass}</li>\r\n                                        <li>Cost in credits: {starship.costInCredits}</li>\r\n                                    </RandomObject>\r\n                                </div>\r\n                                : null}\r\n                            </div>\r\n                        </>)\r\n                    : <Spinner animation=\"grow\" as=\"div\"/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n;\r\n\r\nexport default RandomObjectsContainer;\r\n","import {\r\n    LOAD_RANDOM_OBJECTS,\r\n    PUT_RANDOM_OBJECTS,\r\n    LOAD_SW_LIST,\r\n    PUT_SW_LIST,\r\n    LOAD_SW_STARSHIP,\r\n    LOAD_SW_PERSON,\r\n    LOAD_SW_PLANET,\r\n    PUT_SW_CHARACTER\r\n} from \"./actionTypes\";\r\n\r\nimport {allObjectsType, swList, person, planet, starship} from \"./reducer\";\r\n\r\nexport const loadList = (template:string) => () => ({\r\n    type: LOAD_SW_LIST,\r\n    payload: template\r\n});\r\nexport const putList = (list:swList) => ({\r\n    type: PUT_SW_LIST,\r\n    payload: list\r\n});\r\n\r\nexport const deleteList = () => ({\r\n    type: PUT_SW_LIST,\r\n    payload: null\r\n});\r\n\r\nexport const loadRandomObjects = () => ({\r\n    type: LOAD_RANDOM_OBJECTS\r\n});\r\nexport const putRandomObjects = (objects:allObjectsType) => ({\r\n    type: PUT_RANDOM_OBJECTS,\r\n    payload: objects\r\n});\r\n\r\nexport const loadPerson = (id: number) => ({\r\n    type: LOAD_SW_PERSON,\r\n    payload: id\r\n});\r\nexport const putPersons = (person: person) => ({\r\n    type: PUT_SW_CHARACTER,\r\n    payload: {person}\r\n});\r\n\r\nexport const loadPlanet = (id: number) => ({\r\n    type: LOAD_SW_PLANET,\r\n    payload: id\r\n});\r\nexport const putPlanet = (planet: planet) => ({\r\n    type: PUT_SW_CHARACTER,\r\n    payload: {planet}\r\n});\r\n\r\nexport const loadStarship = (id: number) => ({\r\n    type: LOAD_SW_STARSHIP,\r\n    payload: id\r\n});\r\nexport const putStarship = (starship: starship) => ({\r\n    type: PUT_SW_CHARACTER,\r\n    payload: {starship}\r\n});\r\n","export const LOAD_SW_LIST:string = \"LOAD_PERSON_LIST\";\r\nexport const PUT_SW_LIST:string = \"PUT_SW_LIST\";\r\nexport const LOAD_SW_PLANET:string = \"LOAD_SW_PLANET\";\r\nexport const LOAD_SW_PERSON:string = \"LOAD_SW_PERSON\";\r\nexport const LOAD_SW_STARSHIP:string = \"LOAD_SW_STARSHIP\";\r\nexport const PUT_SW_CHARACTER:string = \"PUT_SW_CHARACTER\";\r\nexport const LOAD_RANDOM_OBJECTS:string = \"LOAD_RANDOM_OBJECTS\";\r\nexport const PUT_RANDOM_OBJECTS:string = \"PUT_RANDOM_OBJECTS\";\r\n","import React from \"react\";\r\nimport \"./stylesSWHello.scss\";\r\n\r\nconst SWHello:React.FC = () => {\r\n    return (\r\n        <div className=\"sw-hello-h1-container\">\r\n            <h1 className=\"sw-hello-h1\">Welcome to star wars word, jedi, choose the category</h1>\r\n            <p>Arrow will help you</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SWHello\r\n","import React, {useEffect} from \"react\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport \"./stylesSWList.scss\";\r\nimport {swList, planet, starship, person} from \"../../../containers/SWContainer/reducer\";\r\nimport Spinner from \"react-bootstrap/cjs/Spinner\";\r\ntype Props = {\r\n    list?: swList\r\n    deleteList: Function\r\n    loadList: Function\r\n    object: planet|starship|person|undefined\r\n}\r\n\r\nconst SWList:React.FC<Props> = ({list, deleteList, loadList, object}) => {\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        loadList();\r\n        if(object) history.push(object.id);\r\n        return ()=>{deleteList()}\r\n    }, [deleteList, loadList, history, object]);\r\n    return(\r\n        list ?\r\n            <ul className=\"sw-list\">\r\n                {list.map(item=>(\r\n                    <Link to={item.id.toString()}>\r\n                        <li key={item.id.toString()}>\r\n                            {item.name}\r\n                        </li>\r\n                    </Link>\r\n                    )\r\n                )}\r\n            </ul>\r\n            :(<div className=\"sw-list\"><Spinner animation=\"grow\"/></div>)\r\n    )\r\n}\r\n\r\nexport default SWList;\r\n","import React, {useEffect} from \"react\";\r\nimport \"./stylesSWCharacter.scss\";\r\n\r\nimport CharacterCard from \"../../CharacterCard\";\r\nimport {person, planet, starship} from \"../../../containers/SWContainer/reducer\";\r\nimport Spinner from \"react-bootstrap/cjs/Spinner\";\r\n\r\ntype Props = {\r\n    children: any\r\n    object: planet | starship | person | undefined\r\n    id: string\r\n    loadFunction: Function\r\n}\r\n\r\nconst SWCharacter: React.FC<Props> = ({children, object, id, loadFunction}) => {\r\n    useEffect(() => {\r\n        loadFunction(id);\r\n    }, [loadFunction, id]);\r\n    return object ?\r\n        (\r\n            <div className=\"sw-container-character\">\r\n                <CharacterCard imgLink={object.img} isVertical fullScreenCardClass isInsideContainer isStarWars>\r\n                    {children}\r\n                </CharacterCard>\r\n            </div>\r\n        )\r\n        : (<div className=\"sw-container-character\"><Spinner animation=\"grow\"/></div>);\r\n}\r\n\r\nexport default SWCharacter;\r\n","import React from \"react\";\r\nimport SWCharacter from \"../../SWCharacter\";\r\nimport {planet} from \"../../../../containers/SWContainer/reducer\";\r\ntype Props = {\r\n    planet?: planet|undefined\r\n    loadPlanet: Function\r\n    id: string\r\n}\r\nconst SWPlanetCard: React.FC<Props> = ({planet, loadPlanet, id}) => (\r\n    <SWCharacter loadFunction={loadPlanet} id={id} object={planet}>\r\n        <li className=\"name\">{planet?.name}</li>\r\n        <li>Diameter: {planet?.diameter}</li>\r\n        <li>Population: {planet?.population}</li>\r\n        <li>Rotation period: {planet?.rotationPeriod}</li>\r\n    </SWCharacter>\r\n);\r\n\r\nexport default SWPlanetCard;\r\n","import React from \"react\";\r\nimport SWCharacter from \"../../SWCharacter\";\r\nimport {person} from \"../../../../containers/SWContainer/reducer\";\r\n\r\ntype Props = {\r\n    person?: person | undefined\r\n    loadPerson: Function\r\n    id: string\r\n}\r\n\r\nconst SWPersonCard: React.FC<Props> = ({person, loadPerson, id}) => (\r\n    <SWCharacter loadFunction={loadPerson} id={id} object={person}>\r\n        <li className=\"name\">{person?.name}</li>\r\n        <li>Height: {person?.height}</li>\r\n        <li>Gender: {person?.gender}</li>\r\n        <li>Eye color: {person?.eyeColor}</li>\r\n    </SWCharacter>\r\n);\r\n\r\nexport default SWPersonCard;\r\n","import React from \"react\";\r\nimport SWCharacter from \"../../SWCharacter\";\r\nimport {starship} from \"../../../../containers/SWContainer/reducer\";\r\n\r\ntype Props = {\r\n    starship?: starship|undefined\r\n    loadStarship: Function\r\n    id: string\r\n}\r\nconst SWStarshipCard: React.FC<Props> = ({starship, id, loadStarship}) => (\r\n    <SWCharacter loadFunction={loadStarship} id={id} object={starship}>\r\n        <li className=\"name\">{starship?.name}</li>\r\n        <li>Model: {starship?.model}</li>\r\n        <li>Starship class: {starship?.starshipClass}</li>\r\n        <li>Cost in credits: {starship?.costInCredits}</li>\r\n    </SWCharacter>\r\n);\r\n\r\nexport default SWStarshipCard;\r\n","import React, {useEffect} from \"react\";\r\nimport \"./stylesSWContainer.scss\";\r\nimport {connect} from \"react-redux\";\r\nimport { Route, RouteComponentProps } from 'react-router-dom';\r\n//@ts-ignore\r\nimport useInterval from 'react-useinterval';\r\nimport SWSwitchPanel from \"../../components/SWComponents/SWSwitchPanel\";\r\nimport RandomObjectsContainer from \"../../components/SWComponents/SWRandomObjectsContainer\";\r\nimport {rootStateType} from \"../../store\";\r\nimport {loadRandomObjects, loadList, deleteList, loadPerson, loadPlanet, loadStarship} from \"./actions\";\r\nimport {allObjectsType, swList, planet, starship, person} from \"./reducer\";\r\nimport SWHello from \"../../components/SWComponents/SWHello\";\r\nimport SWList from \"../../components/SWComponents/SWList\";\r\nimport SWPlanetCard from \"../../components/SWComponents/SWCards/SWPlanetCard\";\r\nimport SWPersonCard from \"../../components/SWComponents/SWCards/SWPersonCard\";\r\nimport SWStarshipCard from \"../../components/SWComponents/SWCards/SWStarshipCard\";\r\n\r\ntype Props = {\r\n    loadRandomObjects: Function\r\n    loadPersonList: Function\r\n    loadStarshipList: Function\r\n    loadPlanetList: Function\r\n    randomObjects: allObjectsType\r\n    list: swList\r\n    router: any\r\n    deleteList: Function\r\n    planet:planet\r\n    starship:starship\r\n    person:person\r\n    loadPerson: Function\r\n    loadPlanet: Function\r\n    loadStarship: Function\r\n}\r\n\r\ntype TParams = {\r\n    id: string\r\n}\r\n\r\nconst SWContainer:React.FC<Props> = (\r\n    {\r\n        loadRandomObjects,\r\n        randomObjects,\r\n        loadStarshipList,\r\n        loadPlanetList,\r\n        loadPersonList,\r\n        list,\r\n        deleteList,\r\n        loadPlanet,\r\n        loadStarship,\r\n        loadPerson,\r\n        planet,\r\n        person,\r\n        starship}) => {\r\n\r\n    useEffect(()=>{\r\n        loadRandomObjects();\r\n    }, [loadRandomObjects]);\r\n\r\n    useInterval(()=>loadRandomObjects(), 5000);\r\n\r\n    return (\r\n        <main className=\"no-footer full-screen sw-color sw-main-page\">\r\n            <RandomObjectsContainer randomObjects={randomObjects}/>\r\n            <SWSwitchPanel/>\r\n            <Route exact path=\"/my-web-site/sw\" component={SWHello}/>\r\n            <Route path=\"/my-web-site/sw/persons\" render={()=> <SWList object={person} list={list} deleteList={deleteList} loadList={loadPersonList}/>}/>\r\n            <Route path=\"/my-web-site/sw/planets\" render={()=> <SWList object={planet} list={list} deleteList={deleteList} loadList={loadPlanetList}/>}/>\r\n            <Route path=\"/my-web-site/sw/starships\" render={()=> <SWList object={starship} list={list} deleteList={deleteList} loadList={loadStarshipList}/>}/>\r\n            <Route path=\"/my-web-site/sw/persons/:id\" render={({match:{params:{id}}}:RouteComponentProps<TParams>)=>\r\n                <SWPersonCard person={person} id={id} loadPerson={loadPerson}/>\r\n            }/>\r\n            <Route path=\"/my-web-site/sw/planets/:id\" render={({match:{params:{id}}}:RouteComponentProps<TParams>)=>\r\n                <SWPlanetCard planet={planet} id={id} loadPlanet={loadPlanet}/>\r\n            }/>\r\n            <Route path=\"/my-web-site/sw/starships/:id\" render={({match:{params:{id}}}:RouteComponentProps<TParams>)=>\r\n                <SWStarshipCard starship={starship} id={id} loadStarship={loadStarship}/>\r\n            }/>\r\n        </main>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({starWars: {randomObjects, list, object}}:rootStateType) => (\r\n    {\r\n        randomObjects,\r\n        list,\r\n        planet: object?.planet,\r\n        starship: object?.starship,\r\n        person: object?.person\r\n\r\n    }\r\n);\r\n\r\nconst mapDispatchToProps =\r\n    {\r\n        loadRandomObjects,\r\n        loadPersonList: loadList(\"people\"),\r\n        loadStarshipList: loadList(\"starships\"),\r\n        loadPlanetList: loadList(\"planets\"),\r\n        deleteList,\r\n        loadPerson,\r\n        loadPlanet,\r\n        loadStarship\r\n    };\r\n\r\n// @ts-ignore\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SWContainer);\r\n","import React from \"react\";\r\nimport SWContainer from \"../../containers/SWContainer\";\r\n\r\n// @ts-ignore\r\nconst StarWarsPage = () => (<SWContainer />);\r\n\r\nexport default StarWarsPage;\r\n","import {NotificationDispatch as Dispatch} from \"./reducer\";\r\nimport {SET_NOTIFICATION} from \"./actionTypes\";\r\n\r\nexport const setError = (errorMessage:string) => (dispatch:Dispatch) => {\r\n    dispatch(\r\n        {\r\n                type:SET_NOTIFICATION,\r\n                payload:{message:errorMessage, type:\"error\"}\r\n            }\r\n        );\r\n}\r\n\r\nexport const setInfo = (message:string) => (dispatch:Dispatch) => {\r\n    dispatch(\r\n        {\r\n                type:SET_NOTIFICATION,\r\n                payload:{message:message, type:\"info\"}\r\n            }\r\n        );\r\n}\r\n","export const SET_NOTIFICATION = \"SET_NOTIFICATION\";\r\n","import React, { useState } from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Segment, Form, Button} from \"semantic-ui-react\";\r\nimport isEmail from 'validator/lib/isEmail';\r\nimport {login} from \"../../actions\";\r\nimport {setInfo, setError} from \"../../../Notifications/actions\";\r\n\r\ntype Props = {\r\n    login:Function\r\n    setError:Function\r\n    setInfo:Function\r\n}\r\n\r\nconst LoginForm:React.FunctionComponent<Props> = ({login:loginUser, setInfo, setError}) => {\r\n    const [email, setEmail] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [isLoading, setLoading] = useState<boolean>(false);\r\n    const [isEmailValid, setIsEmailValid] = useState<boolean>(true);\r\n    const [isPasswordValid, setIsPasswordValid] = useState<boolean>(true);\r\n    const submit = async () => {\r\n        if(!isEmailValid) setError(\"Invalid email\");\r\n        setLoading(true);\r\n        try {\r\n            await loginUser({email, password})\r\n            setInfo(\"Welcome\");\r\n        }catch (e){\r\n            setError(e.response.data.message);\r\n        }finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    return (\r\n        <Form name=\"loginForm\" size=\"large\" onSubmit={submit}>\r\n            <Segment>\r\n                <Form.Input\r\n                    fluid\r\n                    icon=\"at\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"Email\"\r\n                    type=\"email\"\r\n                    error={!isEmailValid}\r\n                    onChange={ev => setEmail(ev.target.value)}\r\n                    onBlur={() => setIsEmailValid(isEmail(email))}\r\n                />\r\n                <Form.Input\r\n                    fluid\r\n                    icon=\"lock\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"Password\"\r\n                    type=\"password\"\r\n                    error={!isPasswordValid}\r\n                    onChange={ev => setPassword(ev.target.value)}\r\n                    onBlur={() => setIsPasswordValid(Boolean(password.length>=6))}\r\n                />\r\n                <Button type=\"submit\" color=\"teal\" fluid size=\"large\" loading={isLoading} primary>\r\n                    Login\r\n                </Button>\r\n            </Segment>\r\n        </Form>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    login, setError, setInfo\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(LoginForm);\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport LoginForm from \"../../containers/AuthProfileContainer/auth/login\";\r\n\r\nconst LoginPage:React.FunctionComponent = () => {\r\n    return(\r\n        <main className=\"no-footer auth-form-container\">\r\n            <h2>Login</h2>\r\n            <LoginForm />\r\n            <p>Don't have an account? <Link to=\"/my-web-site/register\">Sign up</Link></p>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default LoginPage;\r\n","import React, {useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AxiosError} from 'axios';\r\nimport {Segment, Form, Button} from \"semantic-ui-react\";\r\nimport {register} from \"../../actions\";\r\nimport isEmail from 'validator/lib/isEmail';\r\nimport {setInfo, setError} from \"../../../Notifications/actions\";\r\n\r\ntype Props = {\r\n    register:Function\r\n    setError:Function\r\n    setInfo:Function\r\n}\r\n\r\nconst RegisterForm:React.FunctionComponent<Props> = ({register:registerUser, setInfo, setError}) => {\r\n    const [email, setEmail] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [confirmedPassword, setConfirmedPassword] = useState<string>('');\r\n    const [isLoading, setLoading] = useState<boolean>(false);\r\n    const [isEmailValid, setEmailValid] = useState<boolean>(true);\r\n    const [isPasswordValid, setPasswordValid] = useState<boolean>(true);\r\n    const submit = async () => {\r\n        if(!isEmailValid) return setError(\"Invalid email\");\r\n        if(!isPasswordValid) return setError(\"Password must match and contain at least 6 symbols\");\r\n        setError(null);\r\n        setLoading(true);\r\n        try {\r\n            await registerUser({email, password});\r\n            setInfo(\"Successfully registered\");\r\n        }catch (e){\r\n            setError(e.response.data.message);\r\n        }finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    return (\r\n        <Form name=\"registrationForm\" size=\"large\" onSubmit={submit}>\r\n            <Segment>\r\n                <Form.Input\r\n                    fluid\r\n                    icon=\"at\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"Email\"\r\n                    type=\"email\"\r\n                    error={!isEmailValid}\r\n                    onChange={ev => setEmail(ev.target.value)}\r\n                    onBlur={() => setEmailValid(isEmail(email))}\r\n                />\r\n                <Form.Input\r\n                    fluid\r\n                    icon=\"lock\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"Password\"\r\n                    type=\"password\"\r\n                    onChange={ev => setPassword(ev.target.value)}\r\n                    error={!isPasswordValid}\r\n                    onBlur={() => setPasswordValid(password.length>=6)}\r\n                />\r\n                <Form.Input\r\n                    fluid\r\n                    icon=\"lock\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"Password\"\r\n                    type=\"password\"\r\n                    onChange={ev => setConfirmedPassword(ev.target.value)}\r\n                    error={!isPasswordValid}\r\n                    onBlur={() => setPasswordValid(password===confirmedPassword)}\r\n                />\r\n                <Button type=\"submit\" color=\"teal\" fluid size=\"large\" loading={isLoading} primary>\r\n                    Register\r\n                </Button>\r\n            </Segment>\r\n        </Form>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    register,\r\n    setError,\r\n    setInfo\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(RegisterForm)\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport RegisterForm from \"../../containers/AuthProfileContainer/auth/register\";\r\n\r\nconst RegisterPage:React.FunctionComponent = () => {\r\n    return(\r\n        <main className=\"no-footer auth-form-container\">\r\n            <h2>Register</h2>\r\n            <RegisterForm />\r\n            <p>Already have an account? <Link to=\"/my-web-site/login\">Sign in</Link></p>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default RegisterPage;\r\n","export const getImageAvatar = (url:string|undefined):string =>\r\n    url ? url : \"https://forwardsummit.ca/wp-content/uploads/2019/01/avatar-default.png\";\r\n","import React, {useState} from \"react\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport {Icon} from \"semantic-ui-react\";\r\nimport {Profile} from \"../../containers/AuthProfileContainer/reducer\";\r\nimport \"./styleHeader.scss\";\r\nimport {getImageAvatar} from \"../../helpers/imgHelper\";\r\ntype Props = {\r\n    user:Profile\r\n}\r\n\r\nconst Header: React.FC<Props> = ({user}) => {\r\n    const [showContextMenu, setShowContextMenu] = useState(false);\r\n    const toggleContextMenu = () => setShowContextMenu(contextMenu => {\r\n            return !contextMenu;\r\n        }\r\n    );\r\n    return (\r\n        <header className=\"header no-footer\">\r\n            <nav className=\"nav-header\">\r\n                <div className=\"burger-menu header-just-on-small-display\">\r\n                    <div className=\"burger-menu\">\r\n                        <button\r\n                            className=\"burger-menu-btn header-text\"\r\n                            onClick={toggleContextMenu}>\r\n                                <Icon name=\"bars\"/>\r\n                        </button>\r\n                        {\r\n                            showContextMenu ?\r\n                                (\r\n                                    <ul>\r\n                                        <li className=\"header-text\" onClick={toggleContextMenu}><NavLink className=\"header-text\" to=\"/my-web-site/\"><Icon name=\"home\"/></NavLink></li>\r\n                                        <li className=\"header-text\" onClick={toggleContextMenu}><NavLink className=\"header-text\" to=\"/my-web-site/games\">Games</NavLink></li>\r\n                                        <li className=\"header-text\" onClick={toggleContextMenu}><NavLink className=\"header-text\" to=\"/my-web-site/links\">Links</NavLink></li>\r\n                                        <li className=\"header-text\" onClick={toggleContextMenu}><NavLink className=\"header-text\" to=\"/my-web-site/about\">About</NavLink></li>\r\n                                        <li className=\"header-text\" onClick={toggleContextMenu}><NavLink className=\"header-text\" to=\"/my-web-site/sw\">Star Wars</NavLink></li>\r\n                                        <li className=\"header-text\" onClick={toggleContextMenu}><NavLink className=\"header-text\" to=\"/my-web-site/profile\">Profile</NavLink></li>\r\n                                    </ul>\r\n                                )\r\n                                : null\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"logo-container header-just-on-big-display\">\r\n                    <h2 className=\"logo header-text\">\r\n                        <NavLink className=\"header-text\" to=\"/my-web-site/\"><Icon name=\"home\"/></NavLink>\r\n                    </h2>\r\n                </div>\r\n                <div className=\"header-just-on-big-display\">\r\n                    <ul className=\"header-nav-list\">\r\n                        <li className=\"header-text\"><NavLink className=\"header-text\" to=\"/my-web-site/games\">Games</NavLink></li>\r\n                        <li className=\"header-text\"><NavLink className=\"header-text\" to=\"/my-web-site/links\">Links</NavLink></li>\r\n                        <li className=\"header-text\"><NavLink className=\"header-text\" to=\"/my-web-site/about\">About</NavLink></li>\r\n                        <li className=\"header-text\"><NavLink className=\"header-text\" to=\"/my-web-site/sw\">Star Wars</NavLink></li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n            <div className=\"auth-profile-block header-just-on-big-display\">\r\n                {\r\n                    Object.keys(user).length!==0\r\n                        ?\r\n                        <NavLink className=\"header-text\" to=\"/my-web-site/profile\">\r\n                            <img className=\"avatar-icon\" src={getImageAvatar(user.imageUrl)} alt=\"avatar\"/>\r\n                        </NavLink>\r\n                        :\r\n                        <>\r\n                            <NavLink className=\"header-text\" to=\"/my-web-site/login\">Login </NavLink>\r\n                            <NavLink className=\"header-text\" to=\"/my-web-site/register\"> Register</NavLink>\r\n                        </>\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport \"./stylesFooter.scss\"\r\n\r\nconst Footer:React.FC = () => {\r\n    return(\r\n        <footer className=\"footer\">\r\n            <nav className=\"nav-footer\">\r\n                <div className=\"link\">\r\n                    <a href=\"https://github.com/nikita-nikita-nikita\" ><Icon name=\"github\" />GitHub</a>\r\n                </div>\r\n                <div className=\"link\">\r\n                    <a href=\"https://ru.reactjs.org/\"><Icon name=\"react\" />React</a>\r\n                </div>\r\n                <div className=\"link\">\r\n                    <a href=\"https://nodejs.org/uk/\"><Icon name=\"node js\" />Node js</a>\r\n                </div>\r\n            </nav>\r\n            <div className=\"footer-text\">\r\n                Some useful text in footer\r\n            </div>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst RedirectToHome:React.FC = () => <Redirect to=\"/my-web-site\"/>;\r\n\r\nexport default RedirectToHome;\r\n","const ifNotUndefined = <T = string>(toCheck:T|undefined|null, defaultValue:T):T => toCheck ? toCheck : defaultValue;\r\n\r\nexport default ifNotUndefined;\r\n","import {createContext, useContext} from \"react\";\r\nimport ImageService from \"../../service/imgService\";\r\n\r\nconst Context = createContext<ImageService>(new ImageService());\r\n\r\nconst {Provider:ImageServiceProvider} = Context\r\n\r\nexport const useImageServiceContext = () => useContext<ImageService>(Context);\r\n\r\nexport default ImageServiceProvider;\r\n","import myAxios from \"../myApiService\";\r\n\r\nexport default class ImageService {\r\n    loadImageLink = (file: any) => {\r\n        const formData = new FormData();\r\n        formData.append('image', file);\r\n        return myAxios.post<{imageUrl:string}>(\"/img\", formData);\r\n    }\r\n    deleteImageLink = () =>\r\n        myAxios.delete<{imageUrl:string}>(\"/img\");\r\n}\r\n","import React, {useState, ChangeEvent} from \"react\";\r\nimport {Profile} from \"../reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {MapStateToPropsType} from \"../../../store\";\r\nimport {getImageAvatar} from \"../../../helpers/imgHelper\";\r\nimport {change, signOut, del, saveChangedImage} from \"../actions\";\r\nimport validator from \"validator\";\r\nimport \"../stylesProfileAuth.scss\";\r\nimport {Form, Icon} from \"semantic-ui-react\";\r\nimport ifNotUndefined from \"../../../helpers/ifNotUndefined\";\r\nimport {useImageServiceContext} from \"../../imageService\";\r\nimport {setError, setInfo} from \"../../Notifications/actions\";\r\n\r\n\r\ntype Props = {\r\n    user: Profile,\r\n    change: Function,\r\n    signOut: Function,\r\n    del: Function,\r\n    saveChangedImage: (img:string) => Promise<any>,\r\n    setError:Function,\r\n    setInfo:Function\r\n}\r\n\r\n\r\nconst ProfileContainer: React.FunctionComponent<Props> = (\r\n    {\r\n        user,\r\n        change: changeUser,\r\n        signOut: signOutUser,\r\n        del: deleteUser,\r\n        saveChangedImage: saveImage,\r\n        setError,\r\n        setInfo\r\n    }) => {\r\n    //state\r\n    // data\r\n    const [phoneNumber, setPhoneNumber] =\r\n        useState<string>(user.phoneNumber ? user.phoneNumber : \"+380\");\r\n    const [username, setUsername] =\r\n        useState<string>(user.username ? user.username : \"\");\r\n    const [email, setEmail] =\r\n        useState<string>(user.email ? user.email : \"\");\r\n    const [newPassword, setNewPassword] =\r\n        useState<string>(\"\");\r\n    const [currentPassword, setCurrentPassword] =\r\n        useState<string>(\"\");\r\n    const [newImage, setNewImage] =\r\n        useState<string>(ifNotUndefined(user.imageUrl, \"\"));\r\n    //loading\r\n    const [isLoading, setLoading] =\r\n        useState<boolean>(false);\r\n    // errors\r\n    const [phoneNumberError, setPhoneNumberError] =\r\n        useState<boolean>(false);\r\n    const [emailError, setEmailError] =\r\n        useState<boolean>(false);\r\n    const [newPasswordError, setNewPasswordError] =\r\n        useState<boolean>(false);\r\n    // display\r\n    const [changeProfile, setChangeProfile] =\r\n        useState<boolean>(false);\r\n    const [changePassword, setChangePassword] =\r\n        useState<boolean>(false);\r\n    const [isImageChanged, setIsImageChanged] =\r\n        useState<boolean>(false);\r\n    //data from context\r\n    const imageService = useImageServiceContext();\r\n    //deleteChanges\r\n    const deleteChanges = () => {\r\n        setPhoneNumber(user.phoneNumber ? user.phoneNumber : \"+380\");\r\n        setUsername(user.username ? user.username : \"\");\r\n        setEmail(\"\");\r\n        setNewPassword(\"\");\r\n    }\r\n    //deleteLocalErrors\r\n    const deleteErrors = () => {\r\n        setPhoneNumberError(false);\r\n        setEmailError(false);\r\n        setNewPasswordError(false);\r\n    }\r\n    //beforeRequestToServer setLoading(true) deleteRequestError\r\n    const beforeRequestToServer = () => {\r\n        setLoading(true);\r\n    }\r\n\r\n    // submit\r\n    const submit = async () => {\r\n        setLoading(true);\r\n        if(emailError || (newPasswordError&&newPasswordError) || (phoneNumberError&&phoneNumber)) return setError(\"some field invalid\");\r\n        deleteErrors();\r\n        try {\r\n            await changeUser({\r\n                uuid: user.uuid,\r\n                email,\r\n                username,\r\n                newPassword,\r\n                phoneNumber,\r\n                currentPassword\r\n            });\r\n            setInfo(\"Successfully changed\");\r\n        } catch (error) {\r\n            setError(error.response.data.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    //change profile info form\r\n    const form = (\r\n        <>\r\n            <Form onSubmit={submit}>\r\n                <p className=\"important\">If you do not want to change some field just do not touch it</p>\r\n                <div className=\"form-input-container\">\r\n                    <p>Phone :</p>\r\n                    <div>\r\n                        <input\r\n                            className={phoneNumberError ? \"error\" : \"\"}\r\n                            type=\"phone\"\r\n                            placeholder=\"phone\"\r\n                            value={phoneNumber}\r\n                            onChange={event => setPhoneNumber(event.target.value)}\r\n                            onBlur={\r\n                                () => setPhoneNumberError(Boolean(!validator.isMobilePhone(phoneNumber)&&phoneNumber))\r\n                            }\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"form-input-container\">\r\n                    <p>Username :</p>\r\n                    <div>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"username\"\r\n                            value={username}\r\n                            onChange={event => setUsername(event.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-input-container\">\r\n                    <p>Email<span style={{color: \"red\"}}>*</span> :</p>\r\n                    <div>\r\n                        <input\r\n                            className={emailError ? \"error\" : \"\"}\r\n                            type=\"text\"\r\n                            placeholder=\"email\"\r\n                            value={email}\r\n                            onChange={event => setEmail(event.target.value)}\r\n                            onBlur={\r\n                                () => setEmailError(Boolean(!validator.isEmail(email)))\r\n                            }\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {\r\n                    changePassword ?\r\n                        <div className=\"form-input-container\">\r\n                            <p>New password:</p>\r\n                            <div>\r\n                                <input\r\n                                    className={newPasswordError ? \"error\" : \"\"}\r\n                                    type=\"password\"\r\n                                    placeholder=\"new password\"\r\n                                    value={newPassword}\r\n                                    onChange={event => setNewPassword(event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div> : null\r\n                }\r\n                <div className=\"form-input-container\">\r\n                    <p>\r\n                        Old password\r\n                        <span style={{color: \"red\"}}>*</span>\r\n                        (also required for user deleting) :\r\n                    </p>\r\n                    <div>\r\n                        <input\r\n                            type=\"password\"\r\n                            placeholder=\"current password\"\r\n                            value={currentPassword}\r\n                            onChange={event => setCurrentPassword(event.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"buttons-block\">\r\n                    <button type=\"submit\">Save changes</button>\r\n                    <button type=\"button\" onClick={() => {\r\n                        setChangePassword(!changePassword);\r\n                        setNewPassword(\"\");\r\n                    }}>\r\n                        {!changePassword ? \"Change password\" : \"Do not change password\"}\r\n                    </button>\r\n                    <button type=\"button\" onClick={deleteChanges}>Delete changes</button>\r\n                    <button type=\"button\" onClick={\r\n                        () => deleteUser(currentPassword)\r\n                    }>Delete user</button>\r\n                </div>\r\n            </Form>\r\n        </>\r\n    );\r\n\r\n    const getImageLink = async (event: ChangeEvent<HTMLInputElement>) => {\r\n        beforeRequestToServer();\r\n        if (!event?.target?.files) return;\r\n        try {\r\n            const {data: {imageUrl}} = await imageService.loadImageLink(event.target.files[0]);\r\n            setNewImage(imageUrl);\r\n            setIsImageChanged(true);\r\n        } catch (error) {\r\n            setError(error.response.data.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const deleteImage = async () => {\r\n        beforeRequestToServer();\r\n        try {\r\n            await imageService.deleteImageLink();\r\n            setNewImage(\"\");\r\n            setIsImageChanged(false);\r\n        }catch (error){\r\n            setError(error.response.data.message);\r\n        }finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const saveNewImage = async () => {\r\n        beforeRequestToServer();\r\n        setLoading(true);\r\n        try {\r\n            await saveImage(newImage);\r\n            setIsImageChanged(false);\r\n            setInfo(\"Successfully saved\");\r\n        }catch (error) {\r\n            setError(error.response.data.message);\r\n        }finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"profile-container\">\r\n            <div className=\"static-profile-data-container\">\r\n                <div className=\"avatar-container\">\r\n                    <input name=\"image\" type=\"file\" onChange={getImageLink}  accept=\"image/*\"/>\r\n                    <img\r\n                        src={ifNotUndefined(newImage, getImageAvatar(user.imageUrl))}\r\n                        alt=\"avatar\"/>\r\n                    <Icon name=\"plus\"/>\r\n                    {isImageChanged\r\n                        ?\r\n                        <div className=\"control-new-image-buttons-block\">\r\n                            <button onClick={saveNewImage} className=\"save-button\">\r\n                                <Icon name=\"save\"/>\r\n                            </button>\r\n                            <button\r\n                                onClick={deleteImage}\r\n                                className=\"delete-button\">\r\n                                <Icon name=\"close\"/>\r\n                            </button>\r\n                        </div>\r\n                        : null\r\n                    }\r\n                </div>\r\n                <div className=\"user-data-container\">\r\n                    <h2 className=\"profile-username\">\r\n                        {user.username ? user.username : \"Enter your username downside\"}\r\n                    </h2>\r\n                    <div>Email: {user.email}</div>\r\n                    <div>\r\n                        {user.phoneNumber\r\n                            ? `Phone : ${user.phoneNumber}`\r\n                            : \"Enter your phone number downside\"}\r\n                    </div>\r\n                    <button onClick={() => signOutUser()}>\r\n                        Sign out\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <button onClick={() => {\r\n                setChangeProfile(!changeProfile);\r\n                setChangePassword(false);\r\n            }}>\r\n                {\r\n                    !changeProfile\r\n                        ? \"Change your profile\"\r\n                        : \"Do not change your profile\"\r\n                }\r\n            </button>\r\n            {changeProfile ? form : null}\r\n        </div>\r\n    );\r\n}\r\n\r\ntype StateFromReduxType = {\r\n    user: Profile\r\n}\r\n\r\nconst mapStateToProps: MapStateToPropsType<StateFromReduxType> = state =>\r\n    (\r\n        {\r\n            user: state.profile\r\n        }\r\n    );\r\n\r\nconst mapDispatchToProps = {\r\n    change,\r\n    signOut,\r\n    del,\r\n    saveChangedImage,\r\n    setError,\r\n    setInfo\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileContainer);\r\n","import React from \"react\";\r\nimport ProfileContainer from \"../../containers/AuthProfileContainer/profile\";\r\n\r\nconst ProfilePage:React.FunctionComponent = () => {\r\n    return (\r\n        <main className=\"no-footer\">\r\n            <ProfileContainer/>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default ProfilePage;\r\n","import React, {useEffect} from \"react\";\r\nimport {NotificationManager, NotificationContainer} from \"react-notifications\";\r\nimport {connect} from \"react-redux\";\r\nimport {Notification} from \"./reducer\";\r\nimport {MapStateToPropsType} from \"../../store\";\r\n\r\ntype Props = {\r\n    notification:Notification\r\n}\r\n\r\nconst Notifications:React.FunctionComponent<Props> = ({notification}) =>\r\n{\r\n    useEffect(() => {\r\n        if(notification) NotificationManager[notification.type](notification.message);\r\n    },[notification])\r\n    return <NotificationContainer/>\r\n};\r\n\r\n\r\ntype StateFromReduxType = {\r\n    notification: Notification\r\n};\r\n\r\nconst mapDispatchToProps:MapStateToPropsType<StateFromReduxType> = state =>\r\n    (\r\n        {\r\n            notification: state.notification\r\n        }\r\n    );\r\n\r\nexport default connect(mapDispatchToProps)(Notifications);\r\n","import React, {useEffect} from \"react\";\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport {connect} from \"react-redux\";\r\nimport {getCurrentUser} from \"../AuthProfileContainer/actions\";\r\nimport {MapStateToPropsType} from \"../../store\";\r\nimport PrivateRoute from \"./priviteRoute\";\r\nimport PublicRoute from \"./publicRoute\";\r\nimport NotFound from \"../../pages/NotFound\";\r\nimport MainPage from \"../../pages/MainPage\";\r\nimport LinksPage from \"../../pages/LinksPage\";\r\nimport AboutPage from \"../../pages/AboutPage\";\r\nimport GamesPage from \"../../pages/GamePage\";\r\nimport StarWarsPage from \"../../pages/StarWarsPage\";\r\nimport LoginPage from \"../../pages/loginPage\";\r\nimport RegisterPage from \"../../pages/RegisterPage\";\r\nimport Header from \"../../components/Header\";\r\nimport Footer from \"../../components/Footer\";\r\nimport RedirectToHome from \"../../components/RedirectToHome\";\r\nimport ProfilePage from \"../../pages/ProfilePage\";\r\nimport {Profile} from \"../AuthProfileContainer/reducer\";\r\nimport Notifications from \"../Notifications\";\r\n\r\ntype Props = {\r\n    user:Profile\r\n    getCurrentUser:Function\r\n}\r\n\r\nconst Routing: React.FC<Props> = ({user, getCurrentUser}) => {\r\n    useEffect(()=>{\r\n        getCurrentUser();\r\n    }, [getCurrentUser]);\r\n    return (\r\n        <>\r\n            <Header user={user}/>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={RedirectToHome}/>\r\n                <Route path=\"/my-web-site\" exact component={MainPage}/>\r\n                <Route path=\"/my-web-site/links\" component={LinksPage}/>\r\n                <Route path=\"/my-web-site/about\" component={AboutPage}/>\r\n                <Route path=\"/my-web-site/games\" component={GamesPage}/>\r\n                <Route path=\"/my-web-site/sw/\" component={StarWarsPage}/>\r\n                <PrivateRoute path=\"/my-web-site/profile\" component={ProfilePage}/>\r\n                <PublicRoute path=\"/my-web-site/login\" component={LoginPage}/>\r\n                <PublicRoute path=\"/my-web-site/register\" component={RegisterPage}/>\r\n                <Route path=\"*\" exact component={NotFound}/>\r\n            </Switch>\r\n            <Footer/>\r\n            <Notifications/>\r\n        </>\r\n    )\r\n}\r\n\r\ntype StateFromReduxType = {user:Profile};\r\n\r\nconst mapStateToProps:MapStateToPropsType<StateFromReduxType> = (state) => ({user:state.profile});\r\n\r\nconst mapDispatchToProps = {\r\n    getCurrentUser\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Routing);\r\n","import {Action} from \"redux\";\r\ninterface defaultData {\r\n    img:string\r\n    id:string\r\n    name:string\r\n}\r\n\r\nexport interface person extends defaultData{\r\n    height:string\r\n    eyeColor:string\r\n    gender:string\r\n}\r\n\r\nexport interface planet extends defaultData {\r\n    diameter:number\r\n    population:number\r\n    rotationPeriod:number\r\n}\r\n\r\nexport interface starship extends defaultData {\r\n    model:string\r\n    costInCredits:number\r\n    starshipClass:number\r\n}\r\n\r\ntype swListElementType = {\r\n    id:number\r\n    name:string\r\n}\r\n\r\nexport type swList = Array<swListElementType>;\r\nexport type allObjectsType = {\r\n    planet?:planet,\r\n    person?:person,\r\n    starship?:starship\r\n}\r\nexport type initialStateSWType = {\r\n    object?:allObjectsType\r\n    list?:swList\r\n    randomObjects?: allObjectsType\r\n}\r\n\r\nconst initialState:initialStateSWType = {\r\n    object:{},\r\n    list:[],\r\n    randomObjects:{}\r\n}\r\n\r\ninterface ActionType extends Action{\r\n    payload:swList|allObjectsType\r\n}\r\nexport default (state:initialStateSWType = initialState, action:ActionType) => {\r\n    switch (action.type) {\r\n        case \"PUT_SW_LIST\":\r\n            return {\r\n                ...state,\r\n                list:action.payload\r\n            }\r\n        case \"PUT_SW_CHARACTER\":\r\n            return {\r\n                ...state,\r\n                object:{...state.object, ...action.payload}\r\n            }\r\n        case \"PUT_RANDOM_OBJECTS\":\r\n            return {\r\n                ...state,\r\n                randomObjects:action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import axios from \"axios\";\r\n\r\nclass SWApiService {\r\n    _apiBase = \"https://swapi.dev/api/\";\r\n    _imageBase = \"https://starwars-visualguide.com/assets/img/\";\r\n\r\n    getResource = async (url:string) =>{\r\n        const res = await axios.get(`${this._apiBase}${url}`);\r\n        if (res.statusText!==\"OK\"&&res.statusText!==\"\") throw new Error(`Could not fetch status: ${res.status}`);\r\n        return res.data;\r\n    };\r\n\r\n    getImagePerson = (person:any) => `${this._imageBase}characters/${this._extractId(person)}.jpg`;\r\n    getImagePlanet = (planet:any) => `${this._imageBase}planets/${this._extractId(planet)}.jpg`;\r\n    getImageStarship = (starship:any) => `${this._imageBase}starships/${this._extractId(starship)}.jpg`;\r\n\r\n    getAllObjects =  async(template:string)=> {\r\n        const response = await this.getResource(`${template}/`);\r\n        return response.results.map(this._transformArrayResponse);\r\n    };\r\n\r\n    getPerson = async (id:number)=> {\r\n        const response = await this.getResource(`people/${id}/`);\r\n        return this._transformPeople(response);\r\n    };\r\n\r\n    getPlanet = async (id:number) => {\r\n        const response = await this.getResource(`planets/${id}/`);\r\n        return this._transformPlanet(response);\r\n    };\r\n\r\n    getStarship = async (id:number) =>{\r\n        const response = await this.getResource(`starships/${id}/`);\r\n        return this._transformStarship(response);\r\n    };\r\n\r\n    getRandomObjects = async () => {\r\n\r\n    };\r\n\r\n    _extractId = ({url}:any)=> {\r\n        const idRegExp = /\\/([0-9]*)\\/$/;\r\n        return url.match(idRegExp)[1]\r\n    };\r\n\r\n    _transformPlanet = (planet:any) => {\r\n        return {\r\n            id: this._extractId(planet),\r\n            img: this.getImagePlanet(planet),\r\n            name: planet.name,\r\n            population: planet.population,\r\n            rotationPeriod: planet.rotation_period,\r\n            diameter: planet.diameter\r\n        }\r\n    };\r\n\r\n    _transformPeople = (person:any) => {\r\n        return {\r\n            id: this._extractId(person),\r\n            img: this.getImagePerson(person),\r\n            name: person.name,\r\n            gender: person.gender,\r\n            height: person.height,\r\n            eyeColor: person.eye_color\r\n        }\r\n    };\r\n\r\n    _transformStarship = (starship:any) => {\r\n        return{\r\n            id: this._extractId(starship),\r\n            img: this.getImageStarship(starship),\r\n            name:starship.name,\r\n            model:starship.model,\r\n            costInCredits:starship.cost_in_credits,\r\n            starshipClass:starship.starship_class\r\n        }\r\n    };\r\n\r\n    _transformArrayResponse = (elem:any) => ({\r\n        id:this._extractId(elem),\r\n        name:elem.name\r\n    });\r\n}\r\n\r\nexport default new SWApiService();\r\n","export function randomInteger(min:number, max:number):number {\r\n    const rand = min - 0.5 + Math.random() * (max - min + 1);\r\n    return Math.round(rand);\r\n}\r\n","import SWApiService from \"../../service/swapiService\";\r\nimport {LOAD_RANDOM_OBJECTS, LOAD_SW_LIST, LOAD_SW_PERSON, LOAD_SW_PLANET, LOAD_SW_STARSHIP} from \"./actionTypes\";\r\nimport {person, starship, planet, swList} from \"./reducer\";\r\nimport {putRandomObjects, putList, putPersons, putPlanet, putStarship} from \"./actions\";\r\nimport { takeEvery, put, call } from \"redux-saga/effects\";\r\nimport {randomInteger} from \"../../helpers/randomNumber\";\r\n\r\nfunction* workerLoadRandomObjects() {\r\n    const person:person = yield call(()=>SWApiService.getPerson(randomInteger(1,10)));\r\n    const planet:planet = yield call(()=>SWApiService.getPlanet(randomInteger(2,10)));\r\n    const validNumbers = [5,9,10];\r\n    const starship:starship = yield call(()=>SWApiService.getStarship(validNumbers[randomInteger(0,2)]));\r\n    yield put(putRandomObjects({planet, starship, person}));\r\n}\r\nfunction* workerLoadPersonList(action:any) {\r\n    const list:swList = yield call(()=>SWApiService.getAllObjects(action.payload));\r\n    yield put(putList(list));\r\n}\r\n\r\nfunction* workerLoadPerson(action:any){\r\n    const person:person = yield call(()=>SWApiService.getPerson(action.payload));\r\n    yield put(putPersons(person))\r\n}\r\nfunction* workerLoadPlanet(action:any){\r\n    const planet:planet = yield call(()=>SWApiService.getPlanet(action.payload));\r\n    yield put(putPlanet(planet))\r\n}\r\nfunction* workerLoadStarship(action:any){\r\n    const starship:starship = yield call(()=>SWApiService.getStarship(action.payload));\r\n    yield put(putStarship(starship));\r\n}\r\n\r\nexport function* watchLoadData() {\r\n    yield takeEvery(LOAD_RANDOM_OBJECTS, workerLoadRandomObjects);\r\n    yield takeEvery(LOAD_SW_LIST, workerLoadPersonList);\r\n    yield takeEvery(LOAD_SW_PERSON, workerLoadPerson);\r\n    yield takeEvery(LOAD_SW_PLANET, workerLoadPlanet);\r\n    yield takeEvery(LOAD_SW_STARSHIP, workerLoadStarship);\r\n}\r\n","import {\r\n    createStore,\r\n    applyMiddleware,\r\n    combineReducers,\r\n} from 'redux';\r\nimport { connectRouter, routerMiddleware, RouterState } from 'connected-react-router';\r\nimport thunk from 'redux-thunk';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { createBrowserHistory } from 'history';\r\nimport TechnologiesReducer, {initialStateTechnologiesType} from \"../src/containers/Technologies/reducer\";\r\nimport LinksReducer, {initialStateLinksType} from \"../src/containers/Links/reducer\";\r\nimport SWReducer, {initialStateSWType} from \"./containers/SWContainer/reducer\";\r\nimport ProfileReducer, {initialStateProfileType} from \"./containers/AuthProfileContainer/reducer\";\r\nimport NotificationReducer, {initialStateNotificationType} from \"./containers/Notifications/reducer\";\r\nimport {watchLoadData} from \"./containers/SWContainer/sagas\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nconst initialState = {};\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middlewares = [\r\n    thunk,\r\n    sagaMiddleware,\r\n    routerMiddleware(history)\r\n];\r\n\r\nconst reducers = {\r\n    technologies:TechnologiesReducer,\r\n    links:LinksReducer,\r\n    starWars:SWReducer,\r\n    profile:ProfileReducer,\r\n    notification:NotificationReducer\r\n}\r\n\r\nconst composedEnhancers = composeWithDevTools(\r\n    applyMiddleware(...middlewares)\r\n);\r\n\r\nconst rootReducer = combineReducers({\r\n    router: connectRouter(history),\r\n    ...reducers\r\n});\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composedEnhancers,\r\n);\r\nsagaMiddleware.run(watchLoadData);\r\n\r\nexport type rootStateType = {\r\n    technologies:initialStateTechnologiesType\r\n    links:initialStateLinksType\r\n    starWars:initialStateSWType\r\n    profile:initialStateProfileType\r\n    router:RouterState\r\n    notification:initialStateNotificationType\r\n}\r\n\r\nexport type MapStateToPropsType<T = rootStateType> = (state:rootStateType) => T;\r\nexport type GetRootStateType = () => rootStateType;\r\n\r\nexport default store;\r\n","import {Action} from \"redux\";\r\n\r\nexport type card = {\r\n    link: string,\r\n    title: string\r\n}\r\n\r\nexport type initialStateTechnologiesType = Array<card>;\r\ninterface ActionType extends Action{\r\n    payload: Array<card>\r\n}\r\n\r\nexport default (state: initialStateTechnologiesType = [], action: ActionType) => {\r\n    switch (action.type){\r\n        case \"LOAD_TECHNOLOGIES\":\r\n            return action.payload;\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\n","import {Action} from \"redux\";\r\nexport type linkCard = {\r\n    avatar: string\r\n    linkToProfile: string\r\n    name: string\r\n    nickname: string\r\n};\r\n\r\nexport type initialStateLinksType = Array<linkCard>;\r\ninterface ActionType extends Action {\r\n    payload: Array<linkCard>;\r\n}\r\nexport default (state:initialStateLinksType = [], action:ActionType) => {\r\n    switch (action.type) {\r\n        case \"LOAD_POSTS\":\r\n            return action.payload;\r\n        case \"DELETE_POSTS\":\r\n            return [];\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {Action, Dispatch} from \"redux\";\r\n\r\nexport type Profile = {\r\n    uuid:string\r\n    email: string\r\n    imageUrl?: string\r\n    phoneNumber?: string\r\n    username?: string\r\n    emailVerified?: string,\r\n}\r\n\r\nexport interface ActionType extends Action<string>{\r\n    payload:Profile|string|{}\r\n}\r\n\r\nexport type ProfileDispatch = Dispatch<ActionType>;\r\n\r\nexport type initialStateProfileType = Profile;\r\n\r\nexport default (\r\n    state:initialStateProfileType|{} = {},\r\n    action:ActionType) => {\r\n    switch (action.type){\r\n        case \"PUT_PROFILE\":\r\n            return action.payload;\r\n        case \"PUT_IMAGE\":\r\n            console.log(action.payload);\r\n            return {...state, imageUrl:action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {Action, Dispatch} from \"redux\";\r\nimport { EventType } from \"react-notifications\";\r\n\r\nexport type Notification = {\r\n    message:string\r\n    type:\"error\"|\"info\"\r\n}\r\n\r\nexport interface ActionType extends Action<string>{\r\n    payload:Notification\r\n}\r\n\r\nexport type NotificationDispatch = Dispatch<ActionType>;\r\n\r\nexport type initialStateNotificationType = Notification;\r\n\r\nexport default (\r\n    state:initialStateNotificationType|null = null,\r\n    action:ActionType) => {\r\n    switch (action.type){\r\n        case \"SET_NOTIFICATION\":\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport './App.scss';\r\nimport { Provider } from 'react-redux';\r\nimport {ConnectedRouter} from \"connected-react-router\";\r\nimport Routing from \"./containers/Routing\"\r\nimport store, {history} from \"./store\";\r\n\r\nconst App:React.FC = () => (\r\n    <Provider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            <Routing />\r\n        </ConnectedRouter>\r\n    </Provider>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nconst root = document.getElementById('root');\r\n\r\nReactDOM.render(<App />, root);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}